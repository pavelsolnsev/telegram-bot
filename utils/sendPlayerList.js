const { GlobalState } = require("../store");
const { Markup } = require("telegraf");

const sendPlayerList = async (ctx) => {
  let collectionDate = GlobalState.getCollectionDate();
  let players = GlobalState.getPlayers();
  let queue = GlobalState.getQueue();
  let location = GlobalState.getLocation();
  let listMessageId = GlobalState.getListMessageId();

  let formattedList = "";

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
  if (collectionDate) {
    const options = {
      year: "numeric",
      month: "numeric",
      day: "numeric",
      hour: "2-digit",
      minute: "2-digit",
      weekday: "long",
    };
    const formattedDate = collectionDate.toLocaleString("ru-RU", options);
    const [weekday, date, time] = formattedDate.split(", ");
    formattedList += `üïí <b>${weekday.charAt(0).toUpperCase() + weekday.slice(1)}, ${date.replace(" –≥.", "")}, ${time}</b>\n\n`;
  } else {
    formattedList += `üïí <b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —Å–±–æ—Ä–∞ –Ω–µ —É–∫–∞–∑–∞–Ω—ã!</b>\n\n`;
  }

  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–æ–∫–∞—Ü–∏–∏ –∏ –æ–ø–ª–∞—Ç–µ
  formattedList += `üìç <b>–õ–æ–∫–∞—Ü–∏—è:</b> ${location}\n\n`;
  formattedList += `üí∞ <b>400‚ÄØ‚ÇΩ</b> ‚Äî –£—Å–ª—É–≥–∏: –º—è—á–∏, –≤–æ–¥–∞, –∞–ø—Ç–µ—á–∫–∞, –º–∞–Ω–∏—à–∫–∏, —Ñ–æ—Ç–æ –∏ —Å—ä—ë–º–∫–∞ –º–∞—Ç—á–∞! üé•‚öΩüíßüíä\n`;
  formattedList += `üì≤ <b>–ü–µ—Ä–µ–≤–æ–¥ –ø–æ –Ω–æ–º–µ—Ä—É:</b> <code>89166986185</code>\n`;
  formattedList += `üí≥ <b>–ö–∞—Ä—Ç–∞:</b> <code>2212312412412412</code>\n`;
  formattedList += `üíµ <b>–ù–∞–ª–∏—á–Ω—ã–µ:</b> –ú–æ–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å –Ω–∞ –º–µ—Å—Ç–µ.\n`;

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–º–µ–Ω–∏ –∏–≥—Ä–æ–∫–∞
  const formatPlayerName = (name, maxLength = 12) => {
    const cleanName = name.replace(/^@/, "");
    return cleanName.length > maxLength ? cleanName.slice(0, maxLength - 3) + "..." : cleanName;
  };

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –∏–≥—Ä–æ–∫–∞
  const formatPlayerLine = (index, name, rating, paid) => {
    const paidMark = paid ? " ‚úÖ" : "";
    const paddedIndex = (index + 1).toString().padStart(2, " ") + ".";
    const paddedName = formatPlayerName(name).padEnd(12, " ");
    const formattedRating = parseFloat(rating).toString();
    
    let ratingIcon;
    if (rating < 10) ratingIcon = "‚≠ê";
    else if (rating < 30) ratingIcon = "üí´";
    else if (rating < 60) ratingIcon = "‚ú®";
    else if (rating < 100) ratingIcon = "üå†";
    else if (rating < 150) ratingIcon = "üíé";
    else ratingIcon = "üèÜ";
    return `${paddedIndex}${paddedName} ${ratingIcon}${formattedRating}${paidMark}`;
  };

  // –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ "–í –∏–≥—Ä–µ"
  if (players.length > 0) {
    formattedList += `\nüèÜ <b>–í –∏–≥—Ä–µ:</b>\n<code>`;
    players.forEach((player, index) => {
      const name = player.username ? player.username : player.name.split(" ")[0];
      formattedList += `${formatPlayerLine(index, name, player.rating, player.paid)}\n`;
    });
    formattedList += `</code>\n------------------------------\n`;
  }

  // –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏
  if (queue.length > 0) {
    formattedList += `\nüì¢ <b>–û—á–µ—Ä–µ–¥—å –∏–≥—Ä–æ–∫–æ–≤:</b>\n<code>`;
    queue.forEach((player, index) => {
      const name = player.username ? player.username : player.name.split(" ")[0];
      formattedList += `${formatPlayerLine(index, name, player.rating, player.paid)}\n`;
    });
    formattedList += `</code>\n------------------------------\n`;
  }

  // –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
  formattedList += `\nüìã <b>–°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤:</b> ${players.length} / ${GlobalState.getMaxPlayers()}`;

  const inlineKeyboard = Markup.inlineKeyboard([
    Markup.button.callback("‚öΩ –ò–≥—Ä–∞—Ç—å", "join_match"),
  ]);

  try {
    if (listMessageId) {
      await ctx.telegram.editMessageText(
        ctx.chat.id,
        listMessageId,
        null,
        formattedList,
        { parse_mode: "HTML", reply_markup: inlineKeyboard.reply_markup }
      );
    } else {
      const sentMessage = await ctx.reply(formattedList, {
        parse_mode: "HTML",
        reply_markup: inlineKeyboard.reply_markup,
      });
      GlobalState.setListMessageId(sentMessage.message_id);
      GlobalState.setListMessageChatId(ctx.chat.id);
    }
  } catch (error) {
    if (error.description?.includes("message to edit not found")) {
      listMessageId = null;
      const sentMessage = await ctx.reply(formattedList, {
        parse_mode: "HTML",
        reply_markup: inlineKeyboard.reply_markup,
      });
      GlobalState.setListMessageId(sentMessage.message_id);
      GlobalState.setListMessageChatId(ctx.chat.id);
    } else if (error.description?.includes("message is not modified")) {
      console.log("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.");
    } else {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–ø–∏—Å–∫–∞:", error);
    }
  }
};

module.exports = { sendPlayerList };
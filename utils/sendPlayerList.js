const { GlobalState } = require("../store");
const { Markup } = require("telegraf");

const sendPlayerList = async (ctx) => {
  let collectionDate = GlobalState.getCollectionDate();
  let players = GlobalState.getPlayers();
  let queue = GlobalState.getQueue();
  let location = GlobalState.getLocation();
  let listMessageId = GlobalState.getListMessageId();

  let formattedList = "";

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
  if (collectionDate) {
    const options = {
      year: "numeric",
      month: "numeric",
      day: "numeric",
      hour: "2-digit",
      minute: "2-digit",
      weekday: "long",
    };
    const formattedDate = collectionDate.toLocaleString("ru-RU", options);
    const [weekday, date, time] = formattedDate.split(", ");
    formattedList += `üïí <b>${weekday.charAt(0).toUpperCase() + weekday.slice(1)}, ${date.replace(" –≥.", "")}, ${time}</b>\n\n`;
  } else {
    formattedList += `üïí <b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —Å–±–æ—Ä–∞ –Ω–µ —É–∫–∞–∑–∞–Ω—ã!</b>\n\n`;
  }

  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–æ–∫–∞—Ü–∏–∏ –∏ –æ–ø–ª–∞—Ç–µ
  formattedList += `üìç <b>–ú–µ—Å—Ç–æ:</b> ${location || "–ü–æ–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ üåç"}\n`;
  formattedList += `üí∞ <b>400 ‚ÇΩ</b> (–≤–æ–¥–∞, —Å—ä—ë–º–∫–∞, –º–∞–Ω–∏—à–∫–∏, –∞–ø—Ç–µ—á–∫–∞, –º—É–∑—ã–∫–∞)\n`;
  formattedList += `üí∏ <b>–û–ø–ª–∞—Ç–∏—Ç—å:</b>\n`;
  formattedList += `<code>üì≤ 89166986185</code>\n`;
  formattedList += `<code>üí≥ 2200700430851708</code>\n`;
  formattedList += `üíµ –ù–∞–ª–∏—á–Ω—ã–µ ‚Äî –ù–∞ –º–µ—Å—Ç–µ\n`;
  formattedList += `\nüìú <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤:</b>\n` +
  `- <b>–ó–∞–ø–∏—Å–∞—Ç—å—Å—è:</b> –ù–∞–ø–∏—à–∏—Ç–µ "+" –≤ —á–∞—Ç –≥—Ä—É–ø–ø—ã –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "‚öΩ –ò–≥—Ä–∞—Ç—å" –ø–æ–¥ —Å–ø–∏—Å–∫–æ–º, —á—Ç–æ–±—ã –ø–æ–ø–∞—Å—Ç—å –≤ —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –∏–ª–∏ –æ—á–µ—Ä–µ–¥—å.\n` +
  `- <b>–í—ã–π—Ç–∏:</b> –ù–∞–ø–∏—à–∏—Ç–µ "-", –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ –∏–≥—Ä–∞—Ç—å.\n` +
  `- <b>–°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤:</b> –ù–∞–ø–∏—à–∏—Ç–µ "list" –≤ –õ–° –±–æ—Ç—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.\n` +
  `- <b>–¢–∞–±–ª–∏—Ü–∞ –º–∞—Ç—á–∞:</b> –ù–∞–ø–∏—à–∏—Ç–µ "table" –≤ –õ–° –±–æ—Ç—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ –∏–≥—Ä—ã).\n` +
  `- <b>–†–µ–π—Ç–∏–Ω–≥:</b> –£ –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –µ—Å—Ç—å —Ä–µ–π—Ç–∏–Ω–≥, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≥–æ–ª–æ–≤ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∞—Ç—á–µ–π. –ó–∞ –≥–æ–ª +0.5, –∑–∞ –ø–æ–±–µ–¥—É +3, –∑–∞ –Ω–∏—á—å—é +1, –∑–∞ –ø–æ—Ä–∞–∂–µ–Ω–∏–µ -1.5. –£—Ä–æ–≤–Ω–∏: ‚≠ê (0-9), üí´ (10-29), ‚ú® (30-59), üå† (60-99), üíé (100-149), üèÜ (150+). –ë–æ–ª—å—à–µ –∏–≥—Ä–∞–µ—Ç–µ –∏ –∑–∞–±–∏–≤–∞–µ—Ç–µ ‚Äî –≤—ã—à–µ —Ä–µ–π—Ç–∏–Ω–≥!\n` +
  `- <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b> –ù–∞–∂–º–∏—Ç–µ "–°—Ç–∞—Ä—Ç" –≤ –ª–∏—á–∫–µ —É –±–æ—Ç–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –ø–∏—Å–∞—Ç—å –µ–º—É –∫–æ–º–∞–Ω–¥—ã. –í—ã –ø–æ–ª—É—á–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 3 —á–∞—Å–∞ –¥–æ –º–∞—Ç—á–∞ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–µ—Ä–µ—Ö–æ–¥–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–∏—Å–æ–∫ –∏–ª–∏ –æ–±—Ä–∞—Ç–Ω–æ.\n` +
  `- <b>–û–ø–ª–∞—Ç–∞:</b> –ü–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç–µ –∏–≥—Ä—É –∑–∞—Ä–∞–Ω–µ–µ, —á—Ç–æ–±—ã –Ω–µ —Ç—Ä–∞—Ç–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞ —Å–±–æ—Ä–∞—Ö. \n`;
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–º–µ–Ω–∏ –∏–≥—Ä–æ–∫–∞
  const formatPlayerName = (name, maxLength = 12) => {
    const cleanName = name.replace(/^@/, "");
    return cleanName.length > maxLength ? cleanName.slice(0, maxLength - 3) + "..." : cleanName;
  };

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –∏–≥—Ä–æ–∫–∞
  const formatPlayerLine = (index, name, rating, paid) => {
    const paidMark = paid ? " ‚úÖ" : "";
    const paddedIndex = (index + 1).toString().padStart(2, " ") + ".";
    const paddedName = formatPlayerName(name).padEnd(12, " ");
    const formattedRating = parseFloat(rating).toString();
    
    let ratingIcon;
    if (rating < 10) ratingIcon = "‚≠ê";
    else if (rating < 30) ratingIcon = "üí´";
    else if (rating < 60) ratingIcon = "‚ú®";
    else if (rating < 100) ratingIcon = "üå†";
    else if (rating < 150) ratingIcon = "üíé";
    else ratingIcon = "üèÜ";
    return `${paddedIndex}${paddedName} ${ratingIcon}${formattedRating}${paidMark}`;
  };

  // –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ "–í –∏–≥—Ä–µ"
  if (players.length > 0) {
    formattedList += `\nüèÜ <b>–í –∏–≥—Ä–µ:</b>\n<code>`;
    players.forEach((player, index) => {
      const name = player.username ? player.username : player.name.split(" ")[0];
      formattedList += `${formatPlayerLine(index, name, player.rating, player.paid)}\n`;
    });
    formattedList += `</code>\n------------------------------\n`;
  }

  // –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏
  if (queue.length > 0) {
    formattedList += `\nüì¢ <b>–û—á–µ—Ä–µ–¥—å –∏–≥—Ä–æ–∫–æ–≤:</b>\n<code>`;
    queue.forEach((player, index) => {
      const name = player.username ? player.username : player.name.split(" ")[0];
      formattedList += `${formatPlayerLine(index, name, player.rating, player.paid)}\n`;
    });
    formattedList += `</code>\n------------------------------\n`;
  }

  // –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
  formattedList += `\nüìã <b>–°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤:</b> ${players.length} / ${GlobalState.getMaxPlayers()}`;

  const inlineKeyboard = Markup.inlineKeyboard([
    Markup.button.callback("‚öΩ –ò–≥—Ä–∞—Ç—å", "join_match"),
  ]);

  try {
    if (listMessageId) {
      await ctx.telegram.editMessageText(
        ctx.chat.id,
        listMessageId,
        null,
        formattedList,
        { parse_mode: "HTML", reply_markup: inlineKeyboard.reply_markup }
      );
    } else {
      const sentMessage = await ctx.reply(formattedList, {
        parse_mode: "HTML",
        reply_markup: inlineKeyboard.reply_markup,
      });
      GlobalState.setListMessageId(sentMessage.message_id);
      GlobalState.setListMessageChatId(ctx.chat.id);
    }
  } catch (error) {
    if (error.description?.includes("message to edit not found")) {
      listMessageId = null;
      const sentMessage = await ctx.reply(formattedList, {
        parse_mode: "HTML",
        reply_markup: inlineKeyboard.reply_markup,
      });
      GlobalState.setListMessageId(sentMessage.message_id);
      GlobalState.setListMessageChatId(ctx.chat.id);
    } else if (error.description?.includes("message is not modified")) {
      console.log("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.");
    } else {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–ø–∏—Å–∫–∞:", error);
    }
  }
};

module.exports = { sendPlayerList };
const { Markup } = require("telegraf");
const { deleteMessageAfterDelay } = require("../utils/deleteMessageAfterDelay");
const { buildTeamsMessage } = require("../message/buildTeamsMessage");
const { reshuffleArray } = require("../utils/reshuffleArray");

module.exports = (bot, GlobalState) => {
  bot.action("reshuffle_callback", async (ctx) => {
    const ADMIN_ID = GlobalState.getAdminId();

    if (ctx.from.id !== ADMIN_ID) {
      const message = await ctx.reply("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.");
      return deleteMessageAfterDelay(ctx, message.message_id);
    }

    const numTeams = GlobalState.getLastTeamCount();
    let players = [...GlobalState.getPlayers()];

    if (players.length < numTeams) {
      const message = await ctx.reply("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥!");
      return deleteMessageAfterDelay(ctx, message.message_id);
    }

    // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤ —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º
    players = reshuffleArray(players);

    // –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º
    const teams = Array.from({ length: numTeams }, () => []);
    players.forEach((player, index) => {
      teams[index % numTeams].push(player);
    });

    GlobalState.setTeams(teams);

    const randomSymbols = ["‚öΩ", "üèÄ", "üèà", "üéæ", "üèê", "ü•Ö", "üéØ"];
    const randomSymbol = randomSymbols[Math.floor(Math.random() * randomSymbols.length)];

    const teamsMessage = buildTeamsMessage(teams, `–°–æ—Å—Ç–∞–≤—ã –∫–æ–º–∞–Ω–¥ (–ø–µ—Ä–µ–º–µ—à–∞–Ω—ã) ${randomSymbol}`);

    try {
      await ctx.editMessageText(teamsMessage, {
        parse_mode: "HTML",
        reply_markup: Markup.inlineKeyboard([
          Markup.button.callback("–ü–µ—Ä–µ–º–µ—à–∞—Ç—å —Å–æ—Å—Ç–∞–≤", "reshuffle_callback"),
        ]).reply_markup,
      });
      await ctx.answerCbQuery("–ö–æ–º–∞–Ω–¥—ã –ø–µ—Ä–µ–º–µ—à–∞–Ω—ã!");
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
      await ctx.answerCbQuery("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–∏!");
    }
  });
};
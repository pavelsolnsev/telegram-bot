const buildTeamsMessage = (teamsBase, title = "–°–æ—Å—Ç–∞–≤—ã –∫–æ–º–∞–Ω–¥", teamStats = {}, updatedTeams = teamsBase) => {
  const teamColors = ["üî¥", "üîµ", "üü¢", "üü°"];
  
  // –¢–∞–±–ª–∏—Ü–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ teamsBase
  const teamsWithStats = teamsBase.map((team, index) => {
    const teamKey = `team${index + 1}`;
    const stats = teamStats[teamKey] || { wins: 0, losses: 0, draws: 0, games: 0, goalsScored: 0, goalsConceded: 0 };
    const points = stats.wins * 3 + stats.draws * 1;
    return { team, stats, points, originalIndex: index };
  });

  teamsWithStats.sort((a, b) => b.points - a.points || (b.stats.goalsScored - b.stats.goalsConceded) - (a.stats.goalsScored - a.stats.goalsConceded));

  let message = `üèÜ <b>${title}:</b>\n\n<pre>`;
  message += "–ú  –ö–æ–º–∞–Ω–¥–∞|–ò|–í|–ù|–ü|–ó–ú|–ü–ú|–†–ú|–û\n";
  message += "--+-------+--+-+-+-+-+--+-+-+\n";

  teamsWithStats.forEach((teamData, position) => {
    const { stats, points, originalIndex } = teamData;
    const teamColor = teamColors[originalIndex] || "‚öΩ";
    const place = (position + 1).toString().padStart(2, " ");
    const teamName = `${teamColor}`.padEnd(7, " ");
    const goalDifference = (stats.goalsScored - stats.goalsConceded);

    message += `${place} ${teamName}|${stats.games}|${stats.wins}|${stats.draws}|${stats.losses}|${stats.goalsScored.toString().padStart(2, " ")}|${stats.goalsConceded.toString().padStart(2, " ")}|${goalDifference.toString().padStart(2, " ")}|${points}\n`;
  });

  message += "</pre>\n";

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–º–µ–Ω–∏ –∏–≥—Ä–æ–∫–∞ (—Ç–∞–∫–∞—è –∂–µ –∫–∞–∫ –≤ sendPlayerList)
  const formatPlayerName = (name, maxLength = 11) => {
    const cleanName = name.replace(/^@/, "");
    return cleanName.length > maxLength ? cleanName.slice(0, maxLength - 3) + "..." : cleanName;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ –∏–≥—Ä–æ–∫–∞
  const formatPlayerLine = (index, name, rating, goals) => {
    const goalsMark = goals && goals > 0 ? ` ‚öΩ${goals}` : "";
    const paddedIndex = (index + 1).toString().padStart(2, " ") + ".";
    const paddedName = formatPlayerName(name).padEnd(11, " ");
    const formattedRating = parseFloat(rating).toString();

    let ratingIcon;
    if (rating < 10) ratingIcon = "‚≠ê";
    else if (rating < 30) ratingIcon = "üí´";
    else if (rating < 60) ratingIcon = "‚ú®";
    else if (rating < 100) ratingIcon = "üå†";
    else if (rating < 150) ratingIcon = "üíé";
    else ratingIcon = "üèÜ";
    return `${paddedIndex}${paddedName} ${ratingIcon}${formattedRating}${goalsMark}`;
  };

  message += "<b>–°–æ—Å—Ç–∞–≤—ã:</b>\n";
  updatedTeams.forEach((updatedTeam, index) => {
    const baseTeam = teamsBase[index] || [];
    const teamColor = teamColors[index] || "‚öΩ";
    message += `\n${teamColor} <b>–ö–æ–º–∞–Ω–¥–∞ ${index + 1}:</b>\n<code>`;
    
    updatedTeam.forEach((player, i) => {
      const basePlayer = baseTeam.find(bp => bp.id === player.id) || player;
      const staticRating = basePlayer.rating || 0;
      const displayName = player.username ? player.username : player.name.split(" ")[0];
      message += `${formatPlayerLine(i, displayName, staticRating, player.goals)}\n`;
    });
    message += "</code>";
  });

  return message;
};

module.exports = { buildTeamsMessage };
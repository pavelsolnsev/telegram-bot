const buildTeamsMessage = (teamsBase, title = "–°–æ—Å—Ç–∞–≤—ã –∫–æ–º–∞–Ω–¥", teamStats = {}, updatedTeams = teamsBase) => {
  const teamColors = ["üî¥", "üîµ", "üü¢", "üü°"];
  
  // –¢–∞–±–ª–∏—Ü–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ teamsBase
  const teamsWithStats = teamsBase.map((team, index) => {
    const teamKey = `team${index + 1}`;
    const stats = teamStats[teamKey] || { wins: 0, losses: 0, draws: 0, games: 0, goalsScored: 0, goalsConceded: 0 };
    const points = stats.wins * 3 + stats.draws * 1;
    return { team, stats, points, originalIndex: index };
  });

  teamsWithStats.sort((a, b) => b.points - a.points || (b.stats.goalsScored - b.stats.goalsConceded) - (a.stats.goalsScored - a.stats.goalsConceded));

  let message = `üèÜ <b>${title}:</b>\n\n<pre>`;
  message += "–ú  –ö–æ–º–∞–Ω–¥–∞|–ò|–í|–ù|–ü|–ó–ú|–ü–ú|–†–ú|–û\n";
  message += "--+-------+--+-+-+-+-+--+-+-+\n";

  teamsWithStats.forEach((teamData, position) => {
    const { stats, points, originalIndex } = teamData;
    const teamColor = teamColors[originalIndex] || "‚öΩ";
    const place = (position + 1).toString().padStart(2, " ");
    const teamName = `${teamColor}`.padEnd(7, " ");
    const goalDifference = (stats.goalsScored - stats.goalsConceded);

    message += `${place} ${teamName}|${stats.games}|${stats.wins}|${stats.draws}|${stats.losses}|${stats.goalsScored.toString().padStart(2, " ")}|${stats.goalsConceded.toString().padStart(2, " ")}|${goalDifference.toString().padStart(2, " ")}|${points}\n`;
  });

  message += "</pre>\n";

  message += "<b>–°–æ—Å—Ç–∞–≤—ã:</b>\n";
  updatedTeams.forEach((updatedTeam, index) => {
    const baseTeam = teamsBase[index] || []; // –ë–µ—Ä–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É –∏–∑ teamsBase
    const teamColor = teamColors[index] || "‚öΩ";
    message += `\n${teamColor} <b>–ö–æ–º–∞–Ω–¥–∞ ${index + 1}:</b>\n`;
    
    updatedTeam.forEach((player, i) => {
      // –ù–∞—Ö–æ–¥–∏–º –∏–≥—Ä–æ–∫–∞ –≤ baseTeam –ø–æ id –¥–ª—è —Å—Ç–∞—Ç–∏—á–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞
      const basePlayer = baseTeam.find(bp => bp.id === player.id) || player;
      const staticRating = basePlayer.rating || 0; // –°—Ç–∞—Ç–∏—á–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –∏–∑ teamsBase
      const goalsText = player.goals && player.goals > 0 ? ` ‚öΩ${player.goals}` : "";
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º username, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å, –∏–Ω–∞—á–µ –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ firstname –∏–∑ name, —É–±–∏—Ä–∞–µ–º @ –∏–∑ username
      const displayName = player.username ? player.username.replace(/^@/, "") : player.name.split(" ")[0];
      
      message += `${i + 1}. ${displayName} (‚≠ê${staticRating}) ${goalsText}\n`;
    });
  });

  return message;
};

module.exports = { buildTeamsMessage };
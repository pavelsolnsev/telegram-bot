// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
require("dotenv").config();

// –ü–æ–¥–∫–ª—é—á–∞–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É Telegraf –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram Bot API
const { Telegraf, Markup } = require("telegraf");
// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const bot = new Telegraf(process.env.BOT_TOKEN);

// –ü–æ–ª—É—á–∞–µ–º ID –≥—Ä—É–ø–ø—ã –∏ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const GROUP_ID = Number(process.env.ID);
const ADMIN_ID = Number(process.env.ADMIN_ID);
const IMAGE_URL = process.env.IMAGE_URL || "https://www.meme-arsenal.com/memes/a69b26bcf26d80f28a6422ebac425b5f.jpg";

let listMessageId = null;

// –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —É—á–∞—Å—Ç–≤—É—é—Ç –≤ –∏–≥—Ä–µ
let players = [];

// –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –æ—á–µ—Ä–µ–¥–∏
let queue = [];

// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 14
let MAX_PLAYERS = 14;

// –õ–æ–∫–∞—Ü–∏—è –∏–≥—Ä—ã, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞
let location = "–õ–æ–∫–∞—Ü–∏—è –ø–æ–∫–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞";

// –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —Å–±–æ—Ä–∞ –∏–≥—Ä–æ–∫–æ–≤, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
let collectionDate = null;

// –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, –∑–∞–ø—É—â–µ–Ω –ª–∏ –º–∞—Ç—á
let isMatchStarted = false;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
const deleteMessageAfterDelay = (ctx, messageId, delay = 2000) => {
  setTimeout(() => {
    ctx.telegram.deleteMessage(ctx.chat.id, messageId).catch(() => {});
  }, delay);
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤ –≤ —á–∞—Ç
const sendPlayerList = async (ctx) => {
  let formattedList = "";

  if (collectionDate) {
      const options = {
          year: "numeric",
          month: "numeric",
          day: "numeric",
          hour: "2-digit",
          minute: "2-digit",
          weekday: "long",
      };
      const formattedDate = collectionDate.toLocaleString("ru-RU", options);
      const [weekday, date, time] = formattedDate.split(", ");
      const cleanedDate = date.replace(" –≥.", "");
      const capitalizedWeekday = weekday.charAt(0).toUpperCase() + weekday.slice(1);
      formattedList += `üïí <b>${capitalizedWeekday}, ${cleanedDate}, ${time}</b>\n\n`;
  }

  formattedList += `üìç <b>–õ–æ–∫–∞—Ü–∏—è:</b> ${location}\n\n`;
  formattedList += `üí∞ <b>400‚ÄØ‚ÇΩ</b> ‚Äî –£—Å–ª—É–≥–∏: –º—è—á–∏, –≤–æ–¥–∞, –∞–ø—Ç–µ—á–∫–∞, –º–∞–Ω–∏—à–∫–∏, —Ñ–æ—Ç–æ –∏ —Å—ä—ë–º–∫–∞ –º–∞—Ç—á–∞! üé•‚öΩüíßüíä\n`;
  formattedList += `üì≤ <b>–ü–µ—Ä–µ–≤–æ–¥ –ø–æ –Ω–æ–º–µ—Ä—É:</b> <code>89166986185</code>\n`;
  formattedList += `üí≥ <b>–ö–∞—Ä—Ç–∞:</b> <code>2212312412412412</code>\n`;
  formattedList += `üíµ <b>–ù–∞–ª–∏—á–Ω—ã–µ:</b> –ú–æ–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å –Ω–∞ –º–µ—Å—Ç–µ.\n`;

  if (players.length > 0) {
      formattedList += `\n‚öΩ <b>–í –∏–≥—Ä–µ:</b>\n`;
      players.forEach((player, index) => {
          formattedList += `\n${index + 1}. ${player}`;
      });
      formattedList += `\n\n------------------------------\n`;
  }

  if (queue.length > 0) {
      formattedList += `\nüì¢ <b>–û—á–µ—Ä–µ–¥—å –∏–≥—Ä–æ–∫–æ–≤:</b>\n`;
      queue.forEach((player, index) => {
          formattedList += `\n${index + 1}. ${player}`;
      });
      formattedList += `\n\n------------------------------\n`;
  }

  formattedList += `\nüìã <b>–°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤:</b> ${players.length} / ${MAX_PLAYERS}`;

  // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –º–∞—Ç—á"
  const inlineKeyboard = Markup.inlineKeyboard([
      Markup.button.callback("‚öΩ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –º–∞—Ç—á", "join_match"),
  ]);

  try {
    if (listMessageId) {
      // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      await ctx.telegram.editMessageCaption(
        ctx.chat.id,
        listMessageId,
        null,
        formattedList,
        {
          parse_mode: "HTML",
          reply_markup: inlineKeyboard.reply_markup,
        }
      );
    } else {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏ –∫–Ω–æ–ø–∫–æ–π
      const sentMessage = await ctx.replyWithPhoto(IMAGE_URL, {
        caption: formattedList,
        parse_mode: "HTML",
        reply_markup: inlineKeyboard.reply_markup,
      });
      listMessageId = sentMessage.message_id;
    }
  } catch (error) {
    if (error.description.includes('message to edit not found')) {
      // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º ID –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
      listMessageId = null;
      const sentMessage = await ctx.replyWithPhoto(IMAGE_URL, {
        caption: formattedList,
        parse_mode: "HTML",
        reply_markup: inlineKeyboard.reply_markup,
      });
      listMessageId = sentMessage.message_id;
    } else {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤:", error);
    }
  }
};
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
const isAdmin = (ctx) => ctx.from.id === ADMIN_ID;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –∑–∞–ø—É—â–µ–Ω –ª–∏ –º–∞—Ç—á
const isMatchActive = (ctx) => {
  if (!isMatchStarted) {
    return false;
  }
  return true;
};


// –ö–æ–º–∞–Ω–¥–∞ s (start) –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–∞—Ç—á–∞
bot.hears(/^s \d{2}\.\d{2}\.\d{4} \d{2}:\d{2}$/i, async (ctx) => {
  await ctx.deleteMessage().catch(() => {});
  if (!isAdmin(ctx)) {
    const message = await ctx.reply("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.");
    return deleteMessageAfterDelay(ctx, message.message_id);
  }
  const userInput = ctx.message.text.trim().slice(2).trim();
  const [datePart, timePart] = userInput.split(" ");
  const [day, month, year] = datePart.split(".").map(Number);
  const [hours, minutes] = timePart.split(":").map(Number);
  collectionDate = new Date(year, month - 1, day, hours, minutes);
  if (isNaN(collectionDate.getTime())) {
    const message = await ctx.reply(
      "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π: s –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú"
    );
    return deleteMessageAfterDelay(ctx, message.message_id);
  } else {
    players = [];
    queue = [];
    isMatchStarted = true; // –ú–∞—Ç—á –∑–∞–ø—É—â–µ–Ω

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –∏ –∑–∞–∫—Ä–µ–ø–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await sendPlayerList(ctx);

    // –ó–∞–∫—Ä–µ–ø–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (listMessageId) {
      try {
        await ctx.telegram.pinChatMessage(ctx.chat.id, listMessageId);
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
      }
    }
  }
});


// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (t –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú)
bot.hears(/^t \d{2}\.\d{2}\.\d{4} \d{2}:\d{2}$/i, async (ctx) => {
  // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π
  await ctx.deleteMessage().catch(() => {});

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
  if (!isAdmin(ctx)) return;

  // –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
  const userInput = ctx.message.text.trim().slice(2).trim(); // –£–±–∏—Ä–∞–µ–º "t "
  const [datePart, timePart] = userInput.split(" ");
  const [day, month, year] = datePart.split(".").map(Number);
  const [hours, minutes] = timePart.split(":").map(Number);

  // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –¥–∞—Ç—É
  const newDate = new Date(year, month - 1, day, hours, minutes);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞
  if (isNaN(newDate.getTime())) {
      const message = await ctx.reply("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π: t –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú");
      return deleteMessageAfterDelay(ctx, message.message_id, 2000); // –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
  collectionDate = newDate;

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
  const message = await ctx.reply(`‚úÖ –í—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: ${userInput}`);
  deleteMessageAfterDelay(ctx, message.message_id, 2000); // –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
  await sendPlayerList(ctx);
});

// –ö–æ–º–∞–Ω–¥–∞ l (limit) –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ –∏–≥—Ä–æ–∫–æ–≤
bot.hears(/^l \d+$/i, async (ctx) => {
  await ctx.deleteMessage().catch(() => {});
  if (!isAdmin(ctx)) {
    const message = await ctx.reply("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.");
    return deleteMessageAfterDelay(ctx, message.message_id);
  }
  if (!isMatchActive(ctx)) return; // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ –º–∞—Ç—á
  const newLimit = Number(ctx.message.text.trim().slice(2).trim());
  if (newLimit <= 0) {
    const message = await ctx.reply(
      "‚ö†Ô∏è –õ–∏–º–∏—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!"
    );
    return deleteMessageAfterDelay(ctx, message.message_id);
  }
  if (newLimit < MAX_PLAYERS) {
    const playersToMove = players.slice(newLimit);
    queue.unshift(...playersToMove);
    players = players.slice(0, newLimit);
  } else if (newLimit > MAX_PLAYERS) {
    const availableSlots = newLimit - players.length;
    const playersToAdd = queue.splice(0, availableSlots);
    players.push(...playersToAdd);
  }
  MAX_PLAYERS = newLimit;
  const message = await ctx.reply(
    `‚úÖ –õ–∏–º–∏—Ç –∏–≥—Ä–æ–∫–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ ${MAX_PLAYERS}.`
  );
  deleteMessageAfterDelay(ctx, message.message_id);
  await sendPlayerList(ctx);
});


// –ö–æ–º–∞–Ω–¥–∞ p (pay) –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –æ–ø–ª–∞—Ç—ã –∏–≥—Ä–æ–∫–∞
bot.hears(/^p \d+$/i, async (ctx) => {
  await ctx.deleteMessage().catch(() => {});
  if (!isMatchActive(ctx)) return; // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ –º–∞—Ç—á
  if (!isAdmin(ctx)) {
    const message = await ctx.reply("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.");
    return deleteMessageAfterDelay(ctx, message.message_id);
  }
  const playerNumber = Number(ctx.message.text.trim().slice(2).trim());
  if (playerNumber <= 0 || playerNumber > players.length) {
    const message = await ctx.reply("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∏–≥—Ä–æ–∫–∞!");
    return deleteMessageAfterDelay(ctx, message.message_id);
  }
  const playerIndex = playerNumber - 1;
  const playerName = players[playerIndex];
  const cleanedPlayerName = playerName.replace(/‚úÖ/g, "").trim();
  if (!playerName.includes("‚úÖ")) {
    players[playerIndex] = `${cleanedPlayerName} ‚úÖ`;
    // const message = await ctx.reply(
    //   `‚úÖ –ò–≥—Ä–æ–∫ ${cleanedPlayerName} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –æ–ø–ª–∞—Ç–∏–≤—à–∏–π –∏–≥—Ä—É!`
    // );
    // deleteMessageAfterDelay(ctx, message.message_id);
    await sendPlayerList(ctx);
  } else {
    // const message = await ctx.reply(
    //   "‚ö†Ô∏è –≠—Ç–æ—Ç –∏–≥—Ä–æ–∫ —É–∂–µ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –æ–ø–ª–∞—Ç–∏–≤—à–∏–π!"
    // );
    // deleteMessageAfterDelay(ctx, message.message_id);
  }
});

// –ö–æ–º–∞–Ω–¥–∞ e (end) –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–±–æ—Ä–∞ –∏ –æ–±–Ω—É–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
bot.hears(/^e!$/i, async (ctx) => {
  await ctx.deleteMessage().catch(() => {});
  if (!isAdmin(ctx)) {
    const message = await ctx.reply("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.");
    return deleteMessageAfterDelay(ctx, message.message_id);
  }
  if (!isMatchActive(ctx)) return; // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ –º–∞—Ç—á
  if (listMessageId) {
    await ctx.telegram
      .deleteMessage(ctx.chat.id, listMessageId)
      .catch(() => {});
    listMessageId = null;
  }
  players = [];
  queue = [];
  collectionDate = null;
  location = "–õ–æ–∫–∞—Ü–∏—è –ø–æ–∫–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞";
  MAX_PLAYERS = 14;
  isMatchStarted = false; // –ú–∞—Ç—á –∑–∞–≤–µ—Ä—à—ë–Ω
  const message = await ctx.reply(
    "‚úÖ –°–±–æ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω! –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω—É–ª–µ–Ω—ã."
  );
  deleteMessageAfterDelay(ctx, message.message_id);
});

// –ö–æ–º–∞–Ω–¥–∞ u (unpay) –¥–ª—è —Å–Ω—è—Ç–∏—è –æ—Ç–º–µ—Ç–∫–∏ –æ–ø–ª–∞—Ç—ã —É –∏–≥—Ä–æ–∫–∞
bot.hears(/^u \d+$/i, async (ctx) => {
  await ctx.deleteMessage().catch(() => {});
  if (!isAdmin(ctx)) {
    const message = await ctx.reply("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.");
    return deleteMessageAfterDelay(ctx, message.message_id);
  }
  if (!isMatchActive(ctx)) return; // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ –º–∞—Ç—á
  const playerNumber = Number(ctx.message.text.trim().slice(2).trim());
  if (playerNumber <= 0 || playerNumber > players.length) {
    const message = await ctx.reply("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∏–≥—Ä–æ–∫–∞!");
    return deleteMessageAfterDelay(ctx, message.message_id);
  }
  const playerIndex = playerNumber - 1;
  const playerName = players[playerIndex];
  const cleanedPlayerName = playerName.replace(/‚úÖ/g, "").trim();
  if (playerName.includes("‚úÖ")) {
    players[playerIndex] = cleanedPlayerName; // –£–±–∏—Ä–∞–µ–º —Ñ–ª–∞–∂–æ–∫ –æ–ø–ª–∞—Ç—ã
    // const message = await ctx.reply(
    //   `‚úÖ –§–ª–∞–∂–æ–∫ –æ–ø–ª–∞—Ç—ã —É –∏–≥—Ä–æ–∫–∞ ${cleanedPlayerName} —Å–Ω—è—Ç!`
    // );
    // deleteMessageAfterDelay(ctx, message.message_id);
    await sendPlayerList(ctx);
  } else {
    // const message = await ctx.reply(
    //   "‚ö†Ô∏è –≠—Ç–æ—Ç –∏–≥—Ä–æ–∫ –µ—â—ë –Ω–µ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –æ–ø–ª–∞—Ç–∏–≤—à–∏–π!"
    // );
    // deleteMessageAfterDelay(ctx, message.message_id);
  }
});

bot.hears(/^list$/i, async (ctx) => {
  // –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É `list`
  await ctx.deleteMessage().catch(() => {});

  if (!isMatchActive(ctx)) {
    const message = await ctx.reply("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω.");
    return deleteMessageAfterDelay(ctx, message.message_id, 2000); // –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
  }

  if (!listMessageId) {
      const message = await ctx.reply("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω.");
      return deleteMessageAfterDelay(ctx, message.message_id, 2000); // –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
  }

  try {
      // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º —á–∞—Ç –¥–æ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
      const sentMessage = await ctx.telegram.forwardMessage(ctx.chat.id, ctx.chat.id, listMessageId);

      // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
      deleteMessageAfterDelay(ctx, sentMessage.message_id, 10000);
  } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–µ –∫ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é:", error);
      const message = await ctx.reply("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.");
      deleteMessageAfterDelay(ctx, message.message_id, 2000); // –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
  }
});

// –ö–æ–º–∞–Ω–¥–∞ r (rm) –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞ –ø–æ –Ω–æ–º–µ—Ä—É
bot.hears(/^r \d+$/i, async (ctx) => {
  await ctx.deleteMessage().catch(() => {});
  if (!isAdmin(ctx)) {
    const message = await ctx.reply("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.");
    return deleteMessageAfterDelay(ctx, message.message_id);
  }
  if (!isMatchActive(ctx)) return; // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ –º–∞—Ç—á
  const playerNumber = Number(ctx.message.text.trim().slice(2).trim());
  if (playerNumber <= 0 || playerNumber > players.length) {
    const message = await ctx.reply("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∏–≥—Ä–æ–∫–∞!");
    return deleteMessageAfterDelay(ctx, message.message_id);
  }
  const playerIndex = playerNumber - 1;
  const playerName = players[playerIndex];
  players.splice(playerIndex, 1);
  if (queue.length > 0) {
    players.push(queue.shift());
  }
  const message = await ctx.reply(`‚úÖ –ò–≥—Ä–æ–∫ ${playerName} —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞!`);
  deleteMessageAfterDelay(ctx, message.message_id);
  await sendPlayerList(ctx);
});


// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–µ
bot.on("text", async (ctx) => {
 
  const chatId = ctx.chat.id;
  const text = ctx.message.text.trim();
  if (chatId !== GROUP_ID) return;

  const firstName = ctx.message.from.first_name || "";
  const lastName = ctx.message.from.last_name || "";
  const username = ctx.message.from.username
    ? `@${ctx.message.from.username}`
    : "";
  const basePlayer = `${firstName} ${lastName} ${
    username ? `(${username})` : ""
  }`.trim();

  if (text === "+") {
    await ctx.deleteMessage().catch(() => {});
    if (!isMatchActive(ctx)) {
      const message = await ctx.reply("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω.");
      return deleteMessageAfterDelay(ctx, message.message_id, 2000); // –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    }
    if (!players.includes(basePlayer) && !queue.includes(basePlayer)) {
      players.length < MAX_PLAYERS
        ? players.push(basePlayer)
        : queue.push(basePlayer);
      const message = await ctx.reply(
        `‚úÖ ${basePlayer} –¥–æ–±–∞–≤–ª–µ–Ω –≤ ${
          players.length <= MAX_PLAYERS ? "—Å–ø–∏—Å–æ–∫" : "–æ—á–µ—Ä–µ–¥—å"
        }!`
      );
      deleteMessageAfterDelay(ctx, message.message_id);
      await sendPlayerList(ctx);
    } else {
      const message = await ctx.reply("‚ö†Ô∏è –¢—ã —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ –∏–ª–∏ –≤ –æ—á–µ—Ä–µ–¥–∏!");
      deleteMessageAfterDelay(ctx, message.message_id);
    }
    deleteMessageAfterDelay(ctx, ctx.message.message_id);
  } else if (text === "-") {
    await ctx.deleteMessage().catch(() => {});
    if (!isMatchActive(ctx)) {
      const message = await ctx.reply("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω.");
      return deleteMessageAfterDelay(ctx, message.message_id, 2000); // –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    }
    if (players.includes(basePlayer)) {
      players = players.filter((p) => p !== basePlayer);
      if (queue.length > 0) players.push(queue.shift());
      const message = await ctx.reply(`‚úÖ ${basePlayer} —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞!`);
      deleteMessageAfterDelay(ctx, message.message_id);
      await sendPlayerList(ctx);
    } else {
      const message = await ctx.reply("‚ö†Ô∏è –¢—ã –Ω–µ –≤ —Å–ø–∏—Å–∫–µ –∏–≥—Ä–æ–∫–æ–≤!");
      deleteMessageAfterDelay(ctx, message.message_id);
    }
    deleteMessageAfterDelay(ctx, ctx.message.message_id);
  } else if (text === "list") {
    await sendPlayerList(ctx);
  }
});


bot.action("join_match", async (ctx) => {
  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
  const firstName = ctx.from.first_name || "";
  const lastName = ctx.from.last_name || "";
  const username = ctx.from.username ? `@${ctx.from.username}` : "";
  const basePlayer = `${firstName} ${lastName} ${
      username ? `(${username})` : ""
  }`.trim();

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ
  if (!players.includes(basePlayer)) {
      if (players.length < MAX_PLAYERS) {
          players.push(basePlayer); // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫
      } else {
          queue.push(basePlayer); // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      await ctx.answerCbQuery(
          `‚úÖ –í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ ${players.length <= MAX_PLAYERS ? "—Å–ø–∏—Å–æ–∫" : "–æ—á–µ—Ä–µ–¥—å"}!`
      );

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
      await sendPlayerList(ctx);
  } else {
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ
      await ctx.answerCbQuery("‚ö†Ô∏è –í—ã —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ –∏–ª–∏ –≤ –æ—á–µ—Ä–µ–¥–∏!");
  }
});


// / s 16.02.2025 18:00

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch();
console.log("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!");

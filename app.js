// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
require("dotenv").config();

// –ü–æ–¥–∫–ª—é—á–∞–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É Telegraf –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram Bot API
const { Telegraf } = require("telegraf");
// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const bot = new Telegraf(process.env.BOT_TOKEN);

// –ü–æ–ª—É—á–∞–µ–º ID –≥—Ä—É–ø–ø—ã –∏ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const GROUP_ID = Number(process.env.ID);
const ADMIN_ID = Number(process.env.ADMIN_ID);

let listMessageId = null; 

// –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —É—á–∞—Å—Ç–≤—É—é—Ç –≤ –∏–≥—Ä–µ
let players = [];

// –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –æ—á–µ—Ä–µ–¥–∏
let queue = [];

// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 14
let MAX_PLAYERS = 14;

// –õ–æ–∫–∞—Ü–∏—è –∏–≥—Ä—ã, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞
let location = "–õ–æ–∫–∞—Ü–∏—è –ø–æ–∫–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞";

// –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —Å–±–æ—Ä–∞ –∏–≥—Ä–æ–∫–æ–≤, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
let collectionDate = null;

const deleteMessageAfterDelay = (ctx, messageId, delay = 2000) => {
    setTimeout(() => {
        ctx.telegram.deleteMessage(ctx.chat.id, messageId).catch(() => {});
    }, delay);
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤ –≤ —á–∞—Ç
const sendPlayerList = async (ctx) => {
    let formattedList = "";
  
    if (collectionDate) {
      const options = {
        year: "numeric",
        month: "numeric",
        day: "numeric",
        hour: "2-digit",
        minute: "2-digit",
        weekday: "long",
      };
      const formattedDate = collectionDate.toLocaleString("ru-RU", options);
      const [weekday, date, time] = formattedDate.split(", ");
      const cleanedDate = date.replace(" –≥.", "");
      const capitalizedWeekday = weekday.charAt(0).toUpperCase() + weekday.slice(1);
      formattedList += `üïí <b>${capitalizedWeekday}, ${cleanedDate}, –Ω–∞—á–∞–ª–æ –≤ ${time}</b>\n\n`;
    }
  
    formattedList += `üìç <b>–õ–æ–∫–∞—Ü–∏—è:</b> ${location}\n\n`;
    formattedList += `üí∞ <b>400‚ÄØ‚ÇΩ</b> ‚Äî –ü–æ–ª–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Ç —É—Å–ª—É–≥: –≤–æ–¥–∞, –º–∞–Ω–∏—à–∫–∏, —Å—ä—ë–º–∫–∞ –º–∞—Ç—á–∞ –∏ –∞–ø—Ç–µ—á–∫–∞! üé•‚öΩüíßüíä\n`;
    formattedList += `üì≤ <b>–ü–µ—Ä–µ–≤–æ–¥ –ø–æ –Ω–æ–º–µ—Ä—É:</b> <code>89166986185</code>\n`;
    formattedList += `üí≥ <b>–û–ø–ª–∞—Ç–∞ –Ω–∞ –∫–∞—Ä—Ç—É:</b> <code>2212 3124 1241 2412</code>\n`;
    formattedList += `üíµ <b>–ù–∞–ª–∏—á–Ω—ã–µ:</b> –ú–æ–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å –Ω–∞ –º–µ—Å—Ç–µ.\n`;
  
    if (players.length > 0) {
      formattedList += `\n‚öΩ <b>–í –∏–≥—Ä–µ:</b>\n`;
      players.forEach((player, index) => {
        formattedList += `\n${index + 1}. ${player}`;
      });
      formattedList += `\n\n------------------------------\n`;
    }
  
    if (queue.length > 0) {
      formattedList += `\nüì¢ <b>–û—á–µ—Ä–µ–¥—å –∏–≥—Ä–æ–∫–æ–≤:</b>\n`;
      queue.forEach((player, index) => {
        formattedList += `\n${index + 1}. ${player}`;
      });
      formattedList += `\n\n------------------------------\n`;
    }
  
    formattedList += `\nüìã <b>–°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤:</b> ${players.length} / ${MAX_PLAYERS}`;
  
    if (listMessageId) {
      await ctx.telegram.editMessageText(ctx.chat.id, listMessageId, null, formattedList, { parse_mode: "HTML" });
    } else {
      const sentMessage = await ctx.reply(formattedList, { parse_mode: "HTML" });
      listMessageId = sentMessage.message_id;
    }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
const isAdmin = (ctx) => ctx.from.id === ADMIN_ID;

// –ö–æ–º–∞–Ω–¥–∞ /start –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ —Å–±–æ—Ä–∞ –∏–≥—Ä–æ–∫–æ–≤
bot.command("start", async (ctx) => {
    // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π /start
    await ctx.deleteMessage().catch(() => {});

    if (!isAdmin(ctx)) {
        const message = await ctx.reply("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.");
        return deleteMessageAfterDelay(ctx, message.message_id);
    }

    const userInput = ctx.message.text.trim().slice(7).trim();
    if (/^\d{2}\.\d{2}\.\d{4} \d{2}:\d{2}$/.test(userInput)) {
        const [datePart, timePart] = userInput.split(" ");
        const [day, month, year] = datePart.split(".").map(Number);
        const [hours, minutes] = timePart.split(":").map(Number);
        collectionDate = new Date(year, month - 1, day, hours, minutes);
        if (isNaN(collectionDate.getTime())) {
            const message = await ctx.reply("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π: /start –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú");
            return deleteMessageAfterDelay(ctx, message.message_id);
        } else {
            // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –∏ –æ—á–µ—Ä–µ–¥—å –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ /start
            players = [];
            queue = [];
            await sendPlayerList(ctx);
        }
    } else {
        const message = await ctx.reply("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π: /start –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú");
        deleteMessageAfterDelay(ctx, message.message_id);
    }
});

bot.command('end', async (ctx) => {
    // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π /end
    await ctx.deleteMessage().catch(() => {});

    if (!isAdmin(ctx)) {
        const message = await ctx.reply('‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
        return deleteMessageAfterDelay(ctx, message.message_id);
    }

    // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –∏ –æ—á–µ—Ä–µ–¥—å
    players = [];
    queue = [];

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞—Ç—É —Å–±–æ—Ä–∞ –∏ –ª–æ–∫–∞—Ü–∏—é
    collectionDate = null;
    location = "–õ–æ–∫–∞—Ü–∏—è –ø–æ–∫–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞";

    // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∏–≥—Ä–æ–∫–æ–≤, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (listMessageId) {
        try {
            await ctx.telegram.deleteMessage(ctx.chat.id, listMessageId);
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
        }
        listMessageId = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–±–æ—Ä–∞
    const message = await ctx.reply('‚ùå –°–±–æ—Ä –∏–≥—Ä–æ–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω. –°–ø–∏—Å–æ–∫ –æ—á–∏—â–µ–Ω –∏ –∑–∞–∫—Ä—ã—Ç.');
    deleteMessageAfterDelay(ctx, message.message_id);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–µ
bot.on("text", async (ctx) => {
    if (!collectionDate) return;
    const chatId = ctx.chat.id;
    const text = ctx.message.text.trim();
    if (chatId !== GROUP_ID) return;
  
    const firstName = ctx.message.from.first_name || "";
    const lastName = ctx.message.from.last_name || "";
    const username = ctx.message.from.username ? `@${ctx.message.from.username}` : "";
    const basePlayer = `${firstName} ${lastName} ${username ? `(${username})` : ""}`.trim();
  
    if (text === "+") {
      if (!players.includes(basePlayer) && !queue.includes(basePlayer)) {
        players.length < MAX_PLAYERS ? players.push(basePlayer) : queue.push(basePlayer);
        const message = await ctx.reply(`‚úÖ ${basePlayer} –¥–æ–±–∞–≤–ª–µ–Ω –≤ ${players.length <= MAX_PLAYERS ? "—Å–ø–∏—Å–æ–∫" : "–æ—á–µ—Ä–µ–¥—å"}!`);
        deleteMessageAfterDelay(ctx, message.message_id);
        await sendPlayerList(ctx);
      } else {
        const message = await ctx.reply("‚ö†Ô∏è –¢—ã —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ –∏–ª–∏ –≤ –æ—á–µ—Ä–µ–¥–∏!");
        deleteMessageAfterDelay(ctx, message.message_id);
      }
    } else if (text === "-") {
      if (players.includes(basePlayer)) {
        players = players.filter((p) => p !== basePlayer);
        if (queue.length > 0) players.push(queue.shift());
        const message = await ctx.reply(`‚úÖ ${basePlayer} —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞!`);
        deleteMessageAfterDelay(ctx, message.message_id);
        await sendPlayerList(ctx);
      } else {
        const message = await ctx.reply("‚ö†Ô∏è –¢—ã –Ω–µ –≤ —Å–ø–∏—Å–∫–µ –∏–≥—Ä–æ–∫–æ–≤!");
        deleteMessageAfterDelay(ctx, message.message_id);
      }
    } else if (text === "/list") {
      await sendPlayerList(ctx);
    }
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch();
console.log("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!");
// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
require("dotenv").config();

// –ü–æ–¥–∫–ª—é—á–∞–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É Telegraf –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram Bot API
const { Telegraf, Markup } = require("telegraf");

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const bot = new Telegraf(process.env.BOT_TOKEN);

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ –∑–∞–¥–∞–Ω–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const IMAGE_URL = process.env.IMAGE_URL || "https://www.meme-arsenal.com/memes/a69b26bcf26d80f28a6422ebac425b5f.jpg";


const GlobalState = (() => {

  // –ü–æ–ª—É—á–∞–µ–º ID –≥—Ä—É–ø–ø—ã –∏ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
  const ADMIN_ID = Number(process.env.ADMIN_ID);

  const GROUP_ID = Number(process.env.ID);

  // —Å—Ç–∞—Ä—Ç –º–∞—Ç—á–∞
  let isMatchStarted = false
  
  // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤
  let MAX_PLAYERS = 14

  // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤ (–æ–±—ä–µ–∫—Ç—ã —Å id, –∏–º–µ–Ω–µ–º –∏ username)
  let players = [];

  // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏
  let queue = [];

  // –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —Å–±–æ—Ä–∞ –Ω–∞ –º–∞—Ç—á
  let collectionDate = null;

  // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –º–∞—Ç—á–µ
  let notificationSent = false;

  // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å–ø–∏—Å–∫–æ–º –∏–≥—Ä–æ–∫–æ–≤
  let listMessageId = null;
  
  const Store = {

    getAdminId: () => ADMIN_ID,

    getGroupId: () => GROUP_ID,

    getStart: () => isMatchStarted,
    setStart: status => isMatchStarted = status,

    getMaxPlayers: () => MAX_PLAYERS,
    setMaxPlayers: number => MAX_PLAYERS = number,

    getPlayers: () => players,
    setPlayers: array => players = array,

    getQueue: () => queue,
    setQueue: array => queue = array,
    
    getCollectionDate: () => collectionDate,
    setCollectionDate: status => collectionDate = status,

    getLocation: () => location,
    setLocation: string => location = string,
    
    getNotificationSent: () => notificationSent,
    setNotificationSent: status => notificationSent = status,

    getListMessageId: () => listMessageId,
    setListMessageId: status => listMessageId = status,
  }
  return Object.freeze(Store);
})();


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
const sendPrivateMessage = async (telegram, userId, message) => {
  try {
    await telegram.sendMessage(userId, message, { parse_mode: "HTML" });
  } catch (error) {
    if (error.response?.error_code === 403) {
      console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞`);
    } else {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
    }
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –º–∞—Ç—á–µ
// function checkTimeAndNotify() {
//   if (!GlobalState.getStart() || !collectionDate || notificationSent) return;

//   const now = new Date();
//   const timeDiff = collectionDate - now;

//   if (timeDiff <= 0) {
//     GlobalState.setStart(false)
//     return;
//   }

//   const THREE_HOURS_MS = 3 * 60 * 60 * 1000;
//   if (timeDiff <= THREE_HOURS_MS) {
//     players.forEach(player => {
//       sendPrivateMessage(
//         bot.telegram, 
//         player.id, 
//         `‚è∞ <b>–î–æ –Ω–∞—á–∞–ª–∞ –º–∞—Ç—á–∞ –æ—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω–µ–µ 3 —á–∞—Å–æ–≤!</b>\n\n` +
//         `–ù–µ –∑–∞–±—É–¥—å—Ç–µ:\n` +
//         `‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —ç–∫–∏–ø–∏—Ä–æ–≤–∫—É\n` +
//         `‚úÖ –û–ø–ª–∞—Ç–∏—Ç—å —É—á–∞—Å—Ç–∏–µ\n` +
//         `‚úÖ –ü—Ä–∏–π—Ç–∏ –∑–∞ 15 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞\n\n` +
//         `üìç –ú–µ—Å—Ç–æ: ${location}\n` +
//         `üïí –í—Ä–µ–º—è: ${collectionDate.toLocaleString("ru-RU", { 
//           hour: "2-digit", 
//           minute: "2-digit",
//           day: "numeric",
//           month: "long"
//         })}`
//       );
//     });
//     notificationSent = true;
//   }
// }

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤
const sendPlayerList = async (ctx) => {
  let collectionDate = GlobalState.getCollectionDate();
  let players = GlobalState.getPlayers();
  let queue = GlobalState.getQueue();
  let location = GlobalState.setLocation('–Ω–µ—Ç—É –ª–æ–∫–∞—Ü–∏–∏');
  let listMessageId = GlobalState.getListMessageId();
  let formattedList = "";
  
  if (collectionDate) {
    const options = { year: "numeric", month: "numeric", day: "numeric", hour: "2-digit", minute: "2-digit", weekday: "long" };
    const formattedDate = collectionDate.toLocaleString("ru-RU", options);
    const [weekday, date, time] = formattedDate.split(", ");
    formattedList += `üïí <b>${weekday.charAt(0).toUpperCase() + weekday.slice(1)}, ${date.replace(" –≥.", "")}, ${time}</b>\n\n`;
  } else {
    formattedList += `üïí <b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —Å–±–æ—Ä–∞ –Ω–µ —É–∫–∞–∑–∞–Ω—ã!</b>\n\n`;
  }

  formattedList += `üìç <b>–õ–æ–∫–∞—Ü–∏—è:</b> ${location}\n\n`;
  formattedList += `üí∞ <b>400‚ÄØ‚ÇΩ</b> ‚Äî –£—Å–ª—É–≥–∏: –º—è—á–∏, –≤–æ–¥–∞, –∞–ø—Ç–µ—á–∫–∞, –º–∞–Ω–∏—à–∫–∏, —Ñ–æ—Ç–æ –∏ —Å—ä—ë–º–∫–∞ –º–∞—Ç—á–∞! üé•‚öΩüíßüíä\n`;
  formattedList += `üì≤ <b>–ü–µ—Ä–µ–≤–æ–¥ –ø–æ –Ω–æ–º–µ—Ä—É:</b> <code>89166986185</code>\n`;
  formattedList += `üí≥ <b>–ö–∞—Ä—Ç–∞:</b> <code>2212312412412412</code>\n`;
  formattedList += `üíµ <b>–ù–∞–ª–∏—á–Ω—ã–µ:</b> –ú–æ–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å –Ω–∞ –º–µ—Å—Ç–µ.\n`;

  if (players.length > 0) {
    formattedList += `\n‚öΩ <b>–í –∏–≥—Ä–µ:</b>\n`;
    players.forEach((player, index) => {
      formattedList += `\n${index + 1}. ${player.name} ${player.username ? `(${player.username})` : ""}${player.paid ? " ‚úÖ" : ""}`;
    });
    formattedList += `\n\n------------------------------\n`;
  }

  if (queue.length > 0) {
    formattedList += `\nüì¢ <b>–û—á–µ—Ä–µ–¥—å –∏–≥—Ä–æ–∫–æ–≤:</b>\n`;
    queue.forEach((player, index) => {
      formattedList += `\n${index + 1}. ${player.name} ${player.username ? `(${player.username})` : ""}`;
    });
    formattedList += `\n\n------------------------------\n`;
  }

  formattedList += `\nüìã <b>–°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤:</b> ${players.length} / ${GlobalState.getMaxPlayers()}`;

  const inlineKeyboard = Markup.inlineKeyboard([
    Markup.button.callback("‚öΩ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –º–∞—Ç—á", "join_match"),
  ]);

  try {
    if (listMessageId) {
      await ctx.telegram.editMessageCaption(
        ctx.chat.id,
        listMessageId,
        null,
        formattedList,
        { parse_mode: "HTML", reply_markup: inlineKeyboard.reply_markup }
      );
    } else {
      const sentMessage = await ctx.replyWithPhoto(IMAGE_URL, {
        caption: formattedList,
        parse_mode: "HTML",
        reply_markup: inlineKeyboard.reply_markup,
      });
      GlobalState.setListMessageId(sentMessage.message_id);
    }
  } catch (error) {
    if (error.description.includes('message to edit not found')) {
      listMessageId = null;
      const sentMessage = await ctx.replyWithPhoto(IMAGE_URL, {
        caption: formattedList,
        parse_mode: "HTML",
        reply_markup: inlineKeyboard.reply_markup,
      });
      GlobalState.setListMessageId(sentMessage.message_id);
    } else {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–ø–∏—Å–∫–∞:", error);
    }
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º

const isMatchActive = () => GlobalState.getStart();

// –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫–æ–º–∞–Ω–¥—É s –∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
require("./commands/startMatch")(bot, GlobalState, sendPlayerList);

// –ö–æ–º–∞–Ω–¥–∞ p –æ–ø–ª–∞—Ç—ã
require("./commands/pay")(bot, GlobalState, sendPlayerList, isMatchActive);

// –ö–æ–º–∞–Ω–¥–∞ l (limit) –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ –∏–≥—Ä–æ–∫–æ–≤
require("./commands/limit")(bot, sendPlayerList, isMatchActive, GlobalState);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤)
require("./commands/add")(bot, sendPlayerList, isMatchActive, GlobalState);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∫–Ω–æ–ø–∫–∏ "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –º–∞—Ç—á"
require("./commands/buttonAdd")(bot, sendPlayerList, GlobalState);


// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch();

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
// setInterval(checkTimeAndNotify, 60000);

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
console.log("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!");

// s 10.03.2025 18:00
const { Markup } = require("telegraf");

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è –º–∞—Å—Å–∏–≤–∞ –∏–≥—Ä–æ–∫–æ–≤
const reshuffleArray = (arr) => arr.sort(() => Math.random() - 0.5);

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
const divideIntoTeams = (players, numTeams) => {
  const teams = Array.from({ length: numTeams }, () => []);
  players.forEach((player, index) => teams[index % numTeams].push(player));
  return teams;
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å–æ—Å—Ç–∞–≤–∞–º–∏ –∫–æ–º–∞–Ω–¥
const buildTeamsMessage = (teams, title = "–°–æ—Å—Ç–∞–≤—ã –∫–æ–º–∞–Ω–¥") => {
  let message = `üèÜ <b>${title}:</b>\n\n`;
  teams.forEach((team, index) => {
    message += `‚öΩ <b>–ö–æ–º–∞–Ω–¥–∞ ${index + 1}:</b>\n`;
    team.forEach((player, i) => {
      message += `${i + 1}. ${player.name} ${player.username ? `(${player.username})` : ""}\n`;
    });
    message += "\n";
  });
  return message;
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
const deleteMessageAfterDelay = (ctx, messageId, delay = 5000) => {
  setTimeout(() => {
    ctx.deleteMessage(messageId).catch(() => {});
  }, delay);
};

module.exports = (bot, GlobalState) => {
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
  const sendTeamsMessage = async (ctx, message) => {
    const inlineKeyboard = Markup.inlineKeyboard([
      Markup.button.callback("–ü–µ—Ä–µ–º–µ—à–∞—Ç—å —Å–æ—Å—Ç–∞–≤", "reshuffle_callback"),
    ]);
    return ctx.reply(message, { parse_mode: "HTML", reply_markup: inlineKeyboard.reply_markup });
  };

  // –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥ (2, 3 –∏–ª–∏ 4)
  bot.hears(/^team (2|3|4)$/i, async (ctx) => {
    const ADMIN_ID = GlobalState.getAdminId();
    await ctx.deleteMessage().catch(() => {});

    if (ctx.from.id !== ADMIN_ID) {
      const msg = await ctx.reply("‚õî –ù–µ—Ç –ø—Ä–∞–≤!");
      return deleteMessageAfterDelay(ctx, msg.message_id);
    }

    const numTeams = parseInt(ctx.message.text.split(" ")[1], 10);
    let players = [...GlobalState.getPlayers()];

    if (players.length < numTeams) {
      return ctx.reply("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥!");
    }

    // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
    players = reshuffleArray(players);
    const teams = divideIntoTeams(players, numTeams);
    const teamsMessage = buildTeamsMessage(teams, "–°–æ—Å—Ç–∞–≤—ã –∫–æ–º–∞–Ω–¥");

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è
    GlobalState.setLastTeamCount(numTeams);

    await sendTeamsMessage(ctx, teamsMessage);
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ü–µ—Ä–µ–º–µ—à–∞—Ç—å —Å–æ—Å—Ç–∞–≤" –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–∞–≤–∞ –∫–æ–º–∞–Ω–¥
  bot.action("reshuffle_callback", async (ctx) => {
    const ADMIN_ID = GlobalState.getAdminId();
    if (ctx.from.id !== ADMIN_ID) {
      return ctx.answerCbQuery("‚õî –ù–µ—Ç –ø—Ä–∞–≤!");
    }

    const numTeams = GlobalState.getLastTeamCount();
    if (!numTeams) {
      return ctx.answerCbQuery("‚ö†Ô∏è –ö–æ–º–∞–Ω–¥—ã –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω—ã!");
    }

    let players = [...GlobalState.getPlayers()];
    if (players.length < numTeams) {
      return ctx.answerCbQuery("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥!");
    }

    // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤ –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
    players = reshuffleArray(players);
    const teams = divideIntoTeams(players, numTeams);
    const teamsMessage = buildTeamsMessage(teams, "–°–æ—Å—Ç–∞–≤—ã –∫–æ–º–∞–Ω–¥ (–ø–µ—Ä–µ–º–µ—à–∞–Ω—ã)");

    const inlineKeyboard = Markup.inlineKeyboard([
      Markup.button.callback("–ü–µ—Ä–µ–º–µ—à–∞—Ç—å —Å–æ—Å—Ç–∞–≤", "reshuffle_callback"),
    ]);

    try {
      await ctx.editMessageText(teamsMessage, { parse_mode: "HTML", reply_markup: inlineKeyboard.reply_markup });
      await ctx.answerCbQuery("–ö–æ–º–∞–Ω–¥—ã –ø–µ—Ä–µ–º–µ—à–∞–Ω—ã!");
    } catch (error) {
      if (
        error.response &&
        error.response.description &&
        error.response.description.includes("message is not modified")
      ) {
        return ctx.answerCbQuery("–ö–æ–º–∞–Ω–¥—ã –ø–µ—Ä–µ–º–µ—à–∞–Ω—ã!");
      }
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–∏ –∫–æ–º–∞–Ω–¥:", error);
      await ctx.answerCbQuery("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–∏ –∫–æ–º–∞–Ω–¥!");
    }
  });
};

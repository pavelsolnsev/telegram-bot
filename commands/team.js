const { Markup } = require("telegraf");

const { deleteMessageAfterDelay } = require("../utils/deleteMessageAfterDelay"); // –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è –º–∞—Å—Å–∏–≤–∞ –∏–≥—Ä–æ–∫–æ–≤
const reshuffleArray = (arr) => arr.sort(() => Math.random() - 0.5);

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
const divideIntoTeams = (players, numTeams) => {
  const teams = Array.from({ length: numTeams }, () => []);
  players.forEach((player, index) => teams[index % numTeams].push(player));
  return teams;
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å–æ—Å—Ç–∞–≤–∞–º–∏ –∫–æ–º–∞–Ω–¥
const buildTeamsMessage = (teams, title = "–°–æ—Å—Ç–∞–≤—ã –∫–æ–º–∞–Ω–¥") => {
  let message = `üèÜ <b>${title}:</b>\n\n`;
  teams.forEach((team, index) => {
    message += `‚öΩ <b>–ö–æ–º–∞–Ω–¥–∞ ${index + 1}:</b>\n`;
    team.forEach((player, i) => {
      const goalsText =
        player.goals && player.goals > 0 ? ` - –ì–æ–ª—ã: ${player.goals}` : "";
      message += `${i + 1}. ${player.name} ${
        player.username ? `(${player.username})` : ""
      }${goalsText}\n`;
    });
    message += "\n";
  });
  return message;
};

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
	const sendTeamsMessage = async (ctx, message) => {
		const inlineKeyboard = Markup.inlineKeyboard([
			Markup.button.callback("–ü–µ—Ä–µ–º–µ—à–∞—Ç—å —Å–æ—Å—Ç–∞–≤", "reshuffle_callback"),
		]);
		return ctx.reply(message, {
			parse_mode: "HTML",
			reply_markup: inlineKeyboard.reply_markup,
		});
	};


module.exports = (bot, GlobalState) => {

  // –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥ (2, 3 –∏–ª–∏ 4)
  bot.hears(/^team (2|3|4)$/i, async (ctx) => {
    const ADMIN_ID = GlobalState.getAdminId();
    await ctx.deleteMessage().catch(() => {});

    if (ctx.from.id !== ADMIN_ID) {
      const msg = await ctx.reply("‚õî –ù–µ—Ç –ø—Ä–∞–≤!");
      return deleteMessageAfterDelay(ctx, msg.message_id);
    }

    const numTeams = parseInt(ctx.message.text.split(" ")[1], 10);
    let players = [...GlobalState.getPlayers()];

    if (players.length < numTeams) {
      return ctx.reply("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥!");
    }

    // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
    players = reshuffleArray(players);
    const teams = divideIntoTeams(players, numTeams);
    const teamsMessage = buildTeamsMessage(teams, "–°–æ—Å—Ç–∞–≤—ã –∫–æ–º–∞–Ω–¥");

    console.log("teams", teams);
    console.log("teamsMessage", teamsMessage);
    console.log("numTeams", numTeams);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã –≤ GlobalState
    GlobalState.setTeams(teams); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã
    GlobalState.setLastTeamCount(numTeams); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è

    await sendTeamsMessage(ctx, teamsMessage);
  });

  bot.command("g", async (ctx) => {
    const ADMIN_ID = GlobalState.getAdminId();
    if (ctx.from.id !== ADMIN_ID) {
      return ctx.reply("‚õî –ù–µ—Ç –ø—Ä–∞–≤!");
    }

    // –†–∞–∑–±–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É –Ω–∞ –∞—Ä–≥—É–º–µ–Ω—Ç—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä: /g username
    const args = ctx.message.text.split(" ");
    if (args.length < 2) {
      return ctx.reply(
        "–í–≤–µ–¥–∏—Ç–µ ID, username –∏–ª–∏ –∏–º—è –∏–≥—Ä–æ–∫–∞. –ü—Ä–∏–º–µ—Ä: /g username"
      );
    }

    const identifier = args[1].toLowerCase();
    const players = GlobalState.getPlayers();

    // –ò—â–µ–º –∏–≥—Ä–æ–∫–∞ –ø–æ ID, username –∏–ª–∏ –∏–º–µ–Ω–∏
    const player = players.find(
      (p) =>
        String(p.id) === identifier ||
        (p.username && p.username.toLowerCase() === identifier) ||
        (p.name && p.name.toLowerCase() === identifier)
    );

    if (!player) {
      return ctx.reply("–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.");
    }

    console.log("player", player);

    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥ –∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥

    const numTeams = GlobalState.getLastTeamCount();
    if (!numTeams) {
      return ctx.reply("–ö–æ–º–∞–Ω–¥—ã –µ—â–µ –Ω–µ –±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã.");
    }

    console.log("numTeams", numTeams);

    let teams = GlobalState.getTeams(); // –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
    let playerInTeam = null;
    console.log("teams", teams);
    // –ù–∞—Ö–æ–¥–∏–º –∫–æ–º–∞–Ω–¥—É, –∫ –∫–æ—Ç–æ—Ä–æ–π –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∏–≥—Ä–æ–∫
    for (let i = 0; i < teams.length; i++) {
      const team = teams[i];
      playerInTeam = team.find((p) => p.id === player.id);
      if (playerInTeam) {
        playerInTeam.goals = playerInTeam.goals ? playerInTeam.goals + 1 : 1;
        break;
      }
    }

    if (!playerInTeam) {
      return ctx.reply("–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ—Å—Ç–∞–≤–µ –∫–æ–º–∞–Ω–¥.");
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–∞–≤—ã –∫–æ–º–∞–Ω–¥
    teams = reshuffleArray(teams);
    const teamsMessage = buildTeamsMessage(teams, "–°–æ—Å—Ç–∞–≤—ã –∫–æ–º–∞–Ω–¥ (–æ–±–Ω–æ–≤–ª–µ–Ω—ã)");

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –≤ GlobalState
    GlobalState.setTeams(teams);

    // –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å–æ—Å—Ç–∞–≤–∞–º–∏ –∫–æ–º–∞–Ω–¥ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
    const listMessageId = GlobalState.getListMessageId();
    if (listMessageId) {
      try {
        // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º, –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å
        await ctx.telegram.editMessageCaption(
          ctx.chat.id,
          listMessageId,
          null,
          teamsMessage,
          {
            parse_mode: "HTML",
            reply_markup: Markup.inlineKeyboard([
              Markup.button.callback("–ü–µ—Ä–µ–º–µ—à–∞—Ç—å —Å–æ—Å—Ç–∞–≤", "reshuffle_callback"),
            ]).reply_markup,
          }
        );
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥:", error);
      }
    }

    return ctx.reply(
      `–ì–æ–ª –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è ${player.name}. –¢–µ–ø–µ—Ä—å —É –Ω–µ–≥–æ ${playerInTeam.goals} –≥–æ–ª(–æ–≤).`
    );
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ü–µ—Ä–µ–º–µ—à–∞—Ç—å —Å–æ—Å—Ç–∞–≤" –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–∞–≤–∞ –∫–æ–º–∞–Ω–¥
  bot.action("reshuffle_callback", async (ctx) => {
    const ADMIN_ID = GlobalState.getAdminId();
    if (ctx.from.id !== ADMIN_ID) {
      return ctx.answerCbQuery("‚õî –ù–µ—Ç –ø—Ä–∞–≤!");
    }

    const numTeams = GlobalState.getLastTeamCount();
    if (!numTeams) {
      return ctx.answerCbQuery("‚ö†Ô∏è –ö–æ–º–∞–Ω–¥—ã –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω—ã!");
    }

    let players = [...GlobalState.getPlayers()];
    if (players.length < numTeams) {
      return ctx.answerCbQuery("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥!");
    }

    // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤ –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
    players = reshuffleArray(players);
    const teams = divideIntoTeams(players, numTeams);
    const teamsMessage = buildTeamsMessage(
      teams,
      "–°–æ—Å—Ç–∞–≤—ã –∫–æ–º–∞–Ω–¥ (–ø–µ—Ä–µ–º–µ—à–∞–Ω—ã)"
    );

    const inlineKeyboard = Markup.inlineKeyboard([
      Markup.button.callback("–ü–µ—Ä–µ–º–µ—à–∞—Ç—å —Å–æ—Å—Ç–∞–≤", "reshuffle_callback"),
    ]);

    try {
      await ctx.editMessageText(teamsMessage, {
        parse_mode: "HTML",
        reply_markup: inlineKeyboard.reply_markup,
      });
      await ctx.answerCbQuery("–ö–æ–º–∞–Ω–¥—ã –ø–µ—Ä–µ–º–µ—à–∞–Ω—ã!");
    } catch (error) {
      if (
        error.response &&
        error.response.description &&
        error.response.description.includes("message is not modified")
      ) {
        return ctx.answerCbQuery("–ö–æ–º–∞–Ω–¥—ã –ø–µ—Ä–µ–º–µ—à–∞–Ω—ã!");
      }
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–∏ –∫–æ–º–∞–Ω–¥:", error);
      await ctx.answerCbQuery("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–∏ –∫–æ–º–∞–Ω–¥!");
    }
  });
};

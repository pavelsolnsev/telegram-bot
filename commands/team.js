const { Markup } = require("telegraf");
const { GlobalState } = require("../store");
const { deleteMessageAfterDelay } = require("../utils/deleteMessageAfterDelay");

// –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è –º–∞—Å—Å–∏–≤–∞
const reshuffleArray = (arr) => arr.sort(() => Math.random() - 0.5);

// –§—É–Ω–∫—Ü–∏—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ –∫–æ–º–∞–Ω–¥—ã
const divideIntoTeams = (players, numTeams) => {
  const teams = Array.from({ length: numTeams }, () => []);
  players.forEach((player, index) => {
    teams[index % numTeams].push(player);
  });
  return teams;
};

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–º–∞–Ω–¥–∞–º–∏
const buildTeamsMessage = (teams, title = "–°–æ—Å—Ç–∞–≤—ã –∫–æ–º–∞–Ω–¥") => {
  let message = `üèÜ <b>${title}:</b>\n\n`;
  teams.forEach((team, index) => {
    message += `‚öΩ <b>–ö–æ–º–∞–Ω–¥–∞ ${index + 1}:</b>\n`;
    team.forEach((player, i) => {
      const goalsText = player.goals && player.goals > 0 ? ` - –ì–æ–ª—ã: ${player.goals}` : "";
      message += `${i + 1}. ${player.name} ${player.username ? `(${player.username})` : ""}${goalsText}\n`;
    });
    message += "\n";
  });
  return message;
};

const updatePlayingTeamsMessage = async (ctx) => {
  const playingTeamsMessageId = GlobalState.getPlayingTeamsMessageId();
  const playingTeams = GlobalState.getPlayingTeams();

  if (!playingTeamsMessageId || !playingTeams) {
    console.log("–û—à–∏–±–∫–∞: playingTeamsMessageId –∏–ª–∏ playingTeams –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç!");
    return;
  }

  if (!playingTeamsMessageId || !playingTeams) {
    return;
  }

  const teamsMessage = buildPlayingTeamsMessage(
    playingTeams.team1,
    playingTeams.team2,
    playingTeams.teamIndex1,
    playingTeams.teamIndex2
  );

  try {
    await ctx.telegram.editMessageText(
      playingTeamsMessageId.chatId,
      playingTeamsMessageId.messageId,
      null,
      teamsMessage,
      {
        parse_mode: "HTML",
        reply_markup: Markup.inlineKeyboard([
          ...createTeamButtons(playingTeams.team1, playingTeams.teamIndex1),
          ...createTeamButtons(playingTeams.team2, playingTeams.teamIndex2),
        ]).reply_markup,
      }
    );
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–≥—Ä–∞—é—â–∏–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏:", error);
  }
};


// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å–æ—Å—Ç–∞–≤–∞–º–∏ –∫–æ–º–∞–Ω–¥
const sendTeamsMessage = async (ctx, message) => {
  const inlineKeyboard = Markup.inlineKeyboard([
    Markup.button.callback("–ü–µ—Ä–µ–º–µ—à–∞—Ç—å —Å–æ—Å—Ç–∞–≤", "reshuffle_callback"),
  ]);

  const sentMessage = await ctx.reply(message, {
    parse_mode: "HTML",
    reply_markup: inlineKeyboard.reply_markup,
  });

  GlobalState.setLastTeamsMessageId(sentMessage.chat.id, sentMessage.message_id);
};

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã
const createTeamButtons = (team, teamIndex) => {
  return team.map((player, index) =>
    Markup.button.callback(`${index + 1}. ${player.name}`, `goal_${teamIndex}_${index}`)
  );
};

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–≥—Ä–∞—é—â–∏–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏
const buildPlayingTeamsMessage = (team1, team2, teamIndex1, teamIndex2) => {
  let message = "üî• –ò–≥—Ä–∞—é—Ç —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n\n";
  message += `<b>–ö–æ–º–∞–Ω–¥–∞ ${teamIndex1 + 1}:</b>\n`;
  team1.forEach((player, index) => {
    message += `${index + 1}. ${player.name} (${player.username || "–ë–µ–∑ username"}) - –ì–æ–ª—ã: ${player.goals || 0}\n`;
  });
  message += `\n<b>–ö–æ–º–∞–Ω–¥–∞ ${teamIndex2 + 1}:</b>\n`;
  team2.forEach((player, index) => {
    message += `${index + 1}. ${player.name} (${player.username || "–ë–µ–∑ username"}) - –ì–æ–ª—ã: ${player.goals || 0}\n`;
  });
  return message;
};

module.exports = (bot, GlobalState) => {
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≥–æ–ª–æ–≤
  bot.action(/goal_(\d+)_(\d+)/, async (ctx) => {
    const teamIndex = parseInt(ctx.match[1], 10);
    const playerIndex = parseInt(ctx.match[2], 10);
    const teams = GlobalState.getTeams();
  
    if (!teams[teamIndex] || !teams[teamIndex][playerIndex]) {
      return ctx.answerCbQuery("–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!");
    }
  
    const player = teams[teamIndex][playerIndex];
    player.goals = (player.goals || 0) + 1;
    GlobalState.setTeams(teams);
  
    // –û–±–Ω–æ–≤–ª—è–µ–º playingTeams
    const playingTeams = GlobalState.getPlayingTeams();
    if (playingTeams) {
      if (teamIndex === playingTeams.teamIndex1) {
        playingTeams.team1[playerIndex].goals = player.goals;
      } else if (teamIndex === playingTeams.teamIndex2) {
        playingTeams.team2[playerIndex].goals = player.goals;
      }
      GlobalState.setPlayingTeams(playingTeams);
    }
  
    await updatePlayingTeamsMessage(ctx); // –¢–µ–ø–µ—Ä—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–∏—Ç—Å—è

    const message = await ctx.reply(`–ì–æ–ª –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è ${player.name}! –¢–µ–ø–µ—Ä—å —É –Ω–µ–≥–æ ${player.goals} –≥–æ–ª(–æ–≤).`);
    return deleteMessageAfterDelay(ctx, message.message_id);
  });
  
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥
  bot.hears(/^team (2|3|4)$/i, async (ctx) => {
    const ADMIN_ID = GlobalState.getAdminId();
    await ctx.deleteMessage().catch(() => {});

    if (ctx.from.id !== ADMIN_ID) {
      const msg = await ctx.reply("‚õî –ù–µ—Ç –ø—Ä–∞–≤!");
      return deleteMessageAfterDelay(ctx, msg.message_id);
    }

    const numTeams = parseInt(ctx.match[1], 10);
    let players = [...GlobalState.getPlayers()];

    if (players.length < numTeams) {
      return ctx.reply("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥!");
    }

    players = reshuffleArray(players);
    const teams = divideIntoTeams(players, numTeams);
    const teamsMessage = buildTeamsMessage(teams, "–°–æ—Å—Ç–∞–≤—ã –∫–æ–º–∞–Ω–¥");

    GlobalState.setTeams(teams);
    GlobalState.setLastTeamCount(numTeams);
    await sendTeamsMessage(ctx, teamsMessage);
  });

  bot.hears(/^g (\d+) (\d+)$/, async (ctx) => {
    const args = ctx.message.text.split(" ");
    const teamIndex = parseInt(args[1], 10) - 1;
    const playerIndex = parseInt(args[2], 10) - 1;
    const teams = GlobalState.getTeams();

    if (!teams[teamIndex] || !teams[teamIndex][playerIndex]) {
      const message = await ctx.reply("–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!");
      return deleteMessageAfterDelay(ctx, message.message_id);
    }

    const player = teams[teamIndex][playerIndex];
    player.goals = (player.goals || 0) + 1;
    GlobalState.setTeams(teams);

    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ playingTeams
    const playingTeams = GlobalState.getPlayingTeams();
    if (playingTeams) {
      if (teamIndex === playingTeams.teamIndex1) {
        playingTeams.team1[playerIndex].goals = player.goals;
      } else if (teamIndex === playingTeams.teamIndex2) {
        playingTeams.team2[playerIndex].goals = player.goals;
      }
      GlobalState.setPlayingTeams(playingTeams);
    }

    await updatePlayingTeamsMessage(ctx);
    const message = await ctx.reply(`–ì–æ–ª –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è ${player.name}. –¢–µ–ø–µ—Ä—å —É –Ω–µ–≥–æ ${player.goals} –≥–æ–ª(–æ–≤).`);
		return deleteMessageAfterDelay(ctx, message.message_id);
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
  bot.hears(/^play (\d+) (\d+)$/, async (ctx) => {
    const teamIndex1 = parseInt(ctx.match[1], 10) - 1;
    const teamIndex2 = parseInt(ctx.match[2], 10) - 1;
    const teams = GlobalState.getTeams();
  
    if (!teams[teamIndex1] || !teams[teamIndex2]) {
      const message = await ctx.reply("‚õî–ö–æ–º–∞–Ω–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!");
			return deleteMessageAfterDelay(ctx, message.message_id);
    }
  
    const team1 = teams[teamIndex1];
    const team2 = teams[teamIndex2];
    const teamsMessage = buildPlayingTeamsMessage(team1, team2, teamIndex1, teamIndex2);
  
    const sentMessage = await ctx.reply(teamsMessage, {
      parse_mode: "HTML",
      reply_markup: Markup.inlineKeyboard([
        ...createTeamButtons(team1, teamIndex1),
        ...createTeamButtons(team2, teamIndex2),
      ]).reply_markup,
    });
  
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–≥—Ä–∞—é—â–∏–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏
    GlobalState.setPlayingTeamsMessageId(sentMessage.chat.id, sentMessage.message_id);
  
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –∏–≥—Ä–∞—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã
    GlobalState.setPlayingTeams({
      team1,
      team2,
      teamIndex1,
      teamIndex2,
    });
  });


  bot.hears(/^fin$/, async (ctx) => {
    const playingTeams = GlobalState.getPlayingTeams();
    if (!playingTeams) {
      return ctx.reply("‚õî –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–∞—Ç—á–∞!");
    }
  
    const stats = {};
  
    const updateStats = (player, result) => {
      if (!stats[player.name]) {
        stats[player.name] = {
          games: 0,
          wins: 0,
          draws: 0,
          losses: 0,
          goals: 0,
          rating: 0, // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞
        };
      }
      stats[player.name].games += 1;
      stats[player.name].goals += player.goals || 0;
      stats[player.name][result] += 1;
  
      // –í—ã—á–∏—Å–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥
      const { wins, draws, goals, losses, games } = stats[player.name];
      let rating = wins * 3 + draws * 1 + goals * 0.5 - losses * 1.5; // –§–æ—Ä–º—É–ª–∞ –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞
  
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ 0
      if (rating < 0) {
        rating = 0;
      }
  
      stats[player.name].rating = rating; // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥
    };
  
    const team1Goals = playingTeams.team1.reduce((sum, p) => sum + (p.goals || 0), 0);
    const team2Goals = playingTeams.team2.reduce((sum, p) => sum + (p.goals || 0), 0);
  
    let result1 = "draws";
    let result2 = "draws";
  
    if (team1Goals > team2Goals) {
      result1 = "wins";
      result2 = "losses";
    } else if (team1Goals < team2Goals) {
      result1 = "losses";
      result2 = "wins";
    }
  
    playingTeams.team1.forEach((player) => updateStats(player, result1));
    playingTeams.team2.forEach((player) => updateStats(player, result2));
  
    console.log("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤:");
    Object.entries(stats).forEach(([name, data]) => {
      console.log(
        `${name}: –ò–≥—Ä—ã: ${data.games}, –ü–æ–±–µ–¥—ã: ${data.wins}, –ù–∏—á—å–∏: ${data.draws}, –ü–æ—Ä–∞–∂–µ–Ω–∏—è: ${data.losses}, –ì–æ–ª—ã: ${data.goals}, –†–µ–π—Ç–∏–Ω–≥: ${data.rating.toFixed(2)}`
      );
    });
  
    return ctx.reply("‚úÖ –ú–∞—Ç—á –∑–∞–≤–µ—Ä—à–µ–Ω, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!");
  });
  
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ü–µ—Ä–µ–º–µ—à–∞—Ç—å —Å–æ—Å—Ç–∞–≤"
  bot.action("reshuffle_callback", async (ctx) => {
    const ADMIN_ID = GlobalState.getAdminId();

 	  if (ctx.from.id !== ADMIN_ID) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
			const message = await ctx.reply("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.");
			return deleteMessageAfterDelay(ctx, message.message_id); 
		}

    const numTeams = GlobalState.getLastTeamCount();
    let players = [...GlobalState.getPlayers()];

    if (players.length < numTeams) {
      const message = await ctx.reply("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥!");
			return deleteMessageAfterDelay(ctx, message.message_id);
    }

    players = reshuffleArray(players);
    const teams = divideIntoTeams(players, numTeams);
    const teamsMessage = buildTeamsMessage(teams, "–°–æ—Å—Ç–∞–≤—ã –∫–æ–º–∞–Ω–¥ (–ø–µ—Ä–µ–º–µ—à–∞–Ω—ã)");

    await ctx.editMessageText(teamsMessage, {
      parse_mode: "HTML",
      reply_markup: Markup.inlineKeyboard([
        Markup.button.callback("–ü–µ—Ä–µ–º–µ—à–∞—Ç—å —Å–æ—Å—Ç–∞–≤", "reshuffle_callback"),
      ]).reply_markup,
    });
    await ctx.answerCbQuery("–ö–æ–º–∞–Ω–¥—ã –ø–µ—Ä–µ–º–µ—à–∞–Ω—ã!");
  });
};




// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã teams [N]
bot.hears(/^teams (\d+)$/i, async (ctx) => {
  await ctx.deleteMessage().catch(() => {});
  if (!isAdmin(ctx)) {
    const message = await ctx.reply("‚õî –ù–µ—Ç –ø—Ä–∞–≤!");
    return deleteMessageAfterDelay(ctx, message.message_id);
  }
  
  if (!isMatchActive()) {
    const message = await ctx.reply("‚ö†Ô∏è –ú–∞—Ç—á –Ω–µ –Ω–∞—á–∞—Ç!");
    return deleteMessageAfterDelay(ctx, message.message_id);
  }

  const teamCount = parseInt(ctx.match[1]);
  if (teamCount < 2 || teamCount > 4) {
    const message = await ctx.reply("‚ö†Ô∏è –î–æ–ø—É—Å—Ç–∏–º–æ 2-4 –∫–æ–º–∞–Ω–¥—ã!");
    return deleteMessageAfterDelay(ctx, message.message_id);
  }

  if (players.length < teamCount) {
    const message = await ctx.reply("‚ö†Ô∏è –ò–≥—Ä–æ–∫–æ–≤ –º–µ–Ω—å—à–µ —á–µ–º –∫–æ–º–∞–Ω–¥!");
    return deleteMessageAfterDelay(ctx, message.message_id);
  }

  // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
  const shuffledPlayers = shuffle([...players]);
  const teams = splitTeams(shuffledPlayers, teamCount);

  // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
  const messageText = formatTeamsMessage(teams);
  const keyboard = Markup.inlineKeyboard([
    Markup.button.callback("üîÑ –ü–µ—Ä–µ–º–µ—à–∞—Ç—å —Å–Ω–æ–≤–∞", `shuffle_teams_${teamCount}`)
  ]);

  const sentMessage = await ctx.reply(messageText, {
    parse_mode: "HTML",
    reply_markup: keyboard.reply_markup
  });

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  ctx.session.teamsMessageId = sentMessage.message_id;
});

// –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞
function shuffle(array) {
  for (let i = array.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [array[i], array[j]] = [array[j], array[i]];
  }
  return array;
}

// –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –∫–æ–º–∞–Ω–¥—ã
function splitTeams(players, teamCount) {
  const teams = [];
  const playersPerTeam = Math.ceil(players.length / teamCount);
  
  for (let i = 0; i < teamCount; i++) {
    teams.push(players.slice(i * playersPerTeam, (i + 1) * playersPerTeam));
  }
  return teams;
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–º–∞–Ω–¥–∞–º–∏
function formatTeamsMessage(teams) {
  let message = "‚öΩ <b>–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n";
  teams.forEach((team, index) => {
    message += `üîµ <b>–ö–æ–º–∞–Ω–¥–∞ ${index + 1}:</b>\n`;
    team.forEach((player, playerIndex) => {
      message += `${playerIndex + 1}. ${player.name} ${player.username || ""}\n`;
    });
    message += "\n";
  });
  return message;
}
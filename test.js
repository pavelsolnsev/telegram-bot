const { GlobalState } = require("../store");
const { Markup } = require("telegraf");

const sendPlayerList = async (ctx) => {
  let collectionDate = GlobalState.getCollectionDate();
  let players = GlobalState.getPlayers();
  let queue = GlobalState.getQueue();
  let location = GlobalState.getLocation();
  let listMessageId = GlobalState.getListMessageId();
  let isTextMessage = GlobalState.getIsTextMessage() || false; // –§–ª–∞–≥, —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
  const IMAGE_URL = GlobalState.getIMAGE_URL();

  let formattedList = "";

  if (collectionDate) {
    const options = {
      year: "numeric",
      month: "numeric",
      day: "numeric",
      hour: "2-digit",
      minute: "2-digit",
      weekday: "long",
    };
    const formattedDate = collectionDate.toLocaleString("ru-RU", options);
    const [weekday, date, time] = formattedDate.split(", ");
    formattedList += `üïí <b>${weekday.charAt(0).toUpperCase() + weekday.slice(1)}, ${date.replace(" –≥.", "")}, ${time}</b>\n\n`;
  } else {
    formattedList += `üïí <b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —Å–±–æ—Ä–∞ –Ω–µ —É–∫–∞–∑–∞–Ω—ã!</b>\n\n`;
  }

  formattedList += `üìç <b>–õ–æ–∫–∞—Ü–∏—è:</b> ${location}\n\n`;
  formattedList += `üí∞ <b>400‚ÄØ‚ÇΩ</b> ‚Äî –£—Å–ª—É–≥–∏: –º—è—á–∏, –≤–æ–¥–∞, –∞–ø—Ç–µ—á–∫–∞, –º–∞–Ω–∏—à–∫–∏, —Ñ–æ—Ç–æ –∏ —Å—ä—ë–º–∫–∞ –º–∞—Ç—á–∞! üé•‚öΩüíßüíä\n`;
  formattedList += `üì≤ <b>–ü–µ—Ä–µ–≤–æ–¥ –ø–æ –Ω–æ–º–µ—Ä—É:</b> <code>89166986185</code>\n`;
  formattedList += `üí≥ <b>–ö–∞—Ä—Ç–∞:</b> <code>2212312412412412</code>\n`;
  formattedList += `üíµ <b>–ù–∞–ª–∏—á–Ω—ã–µ:</b> –ú–æ–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å –Ω–∞ –º–µ—Å—Ç–µ.\n`;

  if (players.length > 0) {
    formattedList += `\n‚öΩ <b>–í –∏–≥—Ä–µ:</b>\n`;
    players.forEach((player, index) => {
      const paidMark = player.paid ? " ‚úÖ" : "";
      if (player.username) {
        formattedList += `\n${index + 1}. ${player.username} ‚≠ê${player.rating || 0} ${paidMark}`;
      } else {
        formattedList += `\n${index + 1}. ${player.name.split(" ")[0]} ‚≠ê${player.rating || 0} ${paidMark}`;
      }
    });
    formattedList += `\n\n------------------------------\n`;
  }

  if (queue.length > 0) {
    formattedList += `\nüì¢ <b>–û—á–µ—Ä–µ–¥—å –∏–≥—Ä–æ–∫–æ–≤:</b>\n`;
    queue.forEach((player, index) => {
      const paidMark = player.paid ? " ‚úÖ" : "";
      if (player.username) {
        formattedList += `\n${index + 1}. ${player.username} ‚≠ê${player.rating || 0} ${paidMark}`;
      } else {
        formattedList += `\n${index + 1}. ${player.name.split(" ")[0]} ‚≠ê${player.rating || 0} ${paidMark}`;
      }
    });
    formattedList += `\n\n------------------------------\n`;
  }

  formattedList += `\nüìã <b>–°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤:</b> ${players.length} / ${GlobalState.getMaxPlayers()}`;

  const inlineKeyboard = Markup.inlineKeyboard([
    Markup.button.callback("‚öΩ –ò–≥—Ä–∞—Ç—å", "join_match"),
  ]);

  const MAX_CAPTION_LENGTH = 1024; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –ø–æ–¥–ø–∏—Å–∏ –≤ Telegram
  const isCaptionTooLong = formattedList.length > MAX_CAPTION_LENGTH;

  try {
    if (listMessageId) {
      if (isCaptionTooLong) {
        if (!isTextMessage) {
          // –ü–µ—Ä–µ—Ö–æ–¥ –æ—Ç —Ñ–æ—Ç–æ –∫ —Ç–µ–∫—Å—Ç—É: —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –∏ —Å–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ
          await ctx.telegram.deleteMessage(ctx.chat.id, listMessageId).catch(() => {});
          const sentMessage = await ctx.telegram.sendMessage(ctx.chat.id, formattedList, {
            parse_mode: "HTML",
            reply_markup: inlineKeyboard.reply_markup,
          });
          GlobalState.setListMessageId(sentMessage.message_id);
          GlobalState.setIsTextMessage(true);
          // –ó–∞–∫—Ä–µ–ø–ª—è–µ–º –Ω–æ–≤–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          await ctx.telegram.pinChatMessage(ctx.chat.id, sentMessage.message_id).catch((error) => {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
          });
        } else {
          // –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ: –ø—Ä–æ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º
          await ctx.telegram.editMessageText(ctx.chat.id, listMessageId, null, formattedList, {
            parse_mode: "HTML",
            reply_markup: inlineKeyboard.reply_markup,
          });
        }
      } else {
        if (isTextMessage) {
          // –ü–µ—Ä–µ—Ö–æ–¥ –æ—Ç —Ç–µ–∫—Å—Ç–∞ –∫ —Ñ–æ—Ç–æ: —É–¥–∞–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –∏ —Å–æ–∑–¥–∞–µ–º —Å —Ñ–æ—Ç–æ
          await ctx.telegram.deleteMessage(ctx.chat.id, listMessageId).catch(() => {});
          const sentMessage = await ctx.replyWithPhoto(IMAGE_URL, {
            caption: formattedList,
            parse_mode: "HTML",
            reply_markup: inlineKeyboard.reply_markup,
          });
          GlobalState.setListMessageId(sentMessage.message_id);
          GlobalState.setIsTextMessage(false);
          // –ó–∞–∫—Ä–µ–ø–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ
          await ctx.telegram.pinChatMessage(ctx.chat.id, sentMessage.message_id).catch((error) => {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ:", error);
          });
        } else {
          // –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –∏ –ø–æ–¥–ø–∏—Å—å –∫–æ—Ä–æ—Ç–∫–∞—è: —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å
          await ctx.telegram.editMessageCaption(
            ctx.chat.id,
            listMessageId,
            null,
            formattedList,
            { parse_mode: "HTML", reply_markup: inlineKeyboard.reply_markup }
          );
        }
      }
    } else {
      // –ü–µ—Ä–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      if (isCaptionTooLong) {
        const sentMessage = await ctx.telegram.sendMessage(ctx.chat.id, formattedList, {
          parse_mode: "HTML",
          reply_markup: inlineKeyboard.reply_markup,
        });
        GlobalState.setListMessageId(sentMessage.message_id);
        GlobalState.setIsTextMessage(true);
        // –ó–∞–∫—Ä–µ–ø–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await ctx.telegram.pinChatMessage(ctx.chat.id, sentMessage.message_id).catch((error) => {
          console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–∏ –ø–µ—Ä–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
        });
      } else {
        const sentMessage = await ctx.replyWithPhoto(IMAGE_URL, {
          caption: formattedList,
          parse_mode: "HTML",
          reply_markup: inlineKeyboard.reply_markup,
        });
        GlobalState.setListMessageId(sentMessage.message_id);
        GlobalState.setIsTextMessage(false);
        // –ó–∞–∫—Ä–µ–ø–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ
        await ctx.telegram.pinChatMessage(ctx.chat.id, sentMessage.message_id).catch((error) => {
          console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–∏ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ:", error);
        });
      }
    }
  } catch (error) {
    if (error.description?.includes("message to edit not found")) {
      // –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ
      listMessageId = null;
      if (isCaptionTooLong) {
        const sentMessage = await ctx.telegram.sendMessage(ctx.chat.id, formattedList, {
          parse_mode: "HTML",
          reply_markup: inlineKeyboard.reply_markup,
        });
        GlobalState.setListMessageId(sentMessage.message_id);
        GlobalState.setIsTextMessage(true);
        await ctx.telegram.pinChatMessage(ctx.chat.id, sentMessage.message_id).catch((error) => {
          console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–æ—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è):", error);
        });
      } else {
        const sentMessage = await ctx.replyWithPhoto(IMAGE_URL, {
          caption: formattedList,
          parse_mode: "HTML",
          reply_markup: inlineKeyboard.reply_markup,
        });
        GlobalState.setListMessageId(sentMessage.message_id);
        GlobalState.setIsTextMessage(false);
        await ctx.telegram.pinChatMessage(ctx.chat.id, sentMessage.message_id).catch((error) => {
          console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ (–æ—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è):", error);
        });
      }
    } else if (error.description?.includes("message is not modified")) {
      console.log("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.");
    } else {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–ø–∏—Å–∫–∞:", error);
    }
  }
};

module.exports = { sendPlayerList };
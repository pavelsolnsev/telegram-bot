
// –ö–æ–º–∞–Ω–¥–∞ u (unpay) –¥–ª—è —Å–Ω—è—Ç–∏—è –æ—Ç–º–µ—Ç–∫–∏ –æ–ø–ª–∞—Ç—ã —É –∏–≥—Ä–æ–∫–∞



// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (t –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú)
bot.hears(/^t \d{2}\.\d{2}\.\d{4} \d{2}:\d{2}$/i, async (ctx) => {
  // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π
  await ctx.deleteMessage().catch(() => {});

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
  if (!isAdmin(ctx)) return;

  // –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
  const userInput = ctx.message.text.trim().slice(2).trim(); // –£–±–∏—Ä–∞–µ–º "t "
  const [datePart, timePart] = userInput.split(" ");
  const [day, month, year] = datePart.split(".").map(Number);
  const [hours, minutes] = timePart.split(":").map(Number);

  // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –¥–∞—Ç—É
  const newDate = new Date(year, month - 1, day, hours, minutes);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞
  if (isNaN(newDate.getTime())) {
      const message = await ctx.reply("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π: t –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú");
      return deleteMessageAfterDelay(ctx, message.message_id, 2000); // –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
  collectionDate = newDate;

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
  const message = await ctx.reply(`‚úÖ –í—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: ${userInput}`);
  deleteMessageAfterDelay(ctx, message.message_id, 2000); // –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
  await sendPlayerList(ctx);
});

bot.hears(/^list$/i, async (ctx) => {
  // –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É `list`
  await ctx.deleteMessage().catch(() => {});

  if (!isMatchActive(ctx)) {
    const message = await ctx.reply("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω.");
    return deleteMessageAfterDelay(ctx, message.message_id, 2000); // –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
  }

  if (!listMessageId) {
      const message = await ctx.reply("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω.");
      return deleteMessageAfterDelay(ctx, message.message_id, 2000); // –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
  }

  try {
      // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º —á–∞—Ç –¥–æ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
      const sentMessage = await ctx.telegram.forwardMessage(ctx.chat.id, ctx.chat.id, listMessageId);

      // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
      deleteMessageAfterDelay(ctx, sentMessage.message_id, 10000);
  } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–µ –∫ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é:", error);
      const message = await ctx.reply("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.");
      deleteMessageAfterDelay(ctx, message.message_id, 2000); // –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
  }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–±–æ—Ä–∞ –∏ –æ–±–Ω—É–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (—Ñ–æ—Ä–º–∞—Ç: e!)
bot.hears(/^e!$/i, async (ctx) => {
  await ctx.deleteMessage().catch(() => {});
  if (!isAdmin(ctx)) {
    const message = await ctx.reply("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.");
    return deleteMessageAfterDelay(ctx, message.message_id);
  }
  if (!isMatchActive(ctx)) return; // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ –º–∞—Ç—á
  if (listMessageId) {
    await ctx.telegram
      .deleteMessage(ctx.chat.id, listMessageId)
      .catch(() => {});
    listMessageId = null;
  }
  players = [];
  queue = [];
  collectionDate = null;
  location = "–õ–æ–∫–∞—Ü–∏—è –ø–æ–∫–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞";
  MAX_PLAYERS = 14;
  isMatchStarted = false; // –ú–∞—Ç—á –∑–∞–≤–µ—Ä—à—ë–Ω
  const message = await ctx.reply(
    "‚úÖ –°–±–æ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω! –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω—É–ª–µ–Ω—ã."
  );
  deleteMessageAfterDelay(ctx, message.message_id);
  notificationSent = false;
});


// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã teams [N]
bot.hears(/^teams (\d+)$/i, async (ctx) => {
  await ctx.deleteMessage().catch(() => {});
  if (!isAdmin(ctx)) {
    const message = await ctx.reply("‚õî –ù–µ—Ç –ø—Ä–∞–≤!");
    return deleteMessageAfterDelay(ctx, message.message_id);
  }
  
  if (!isMatchActive()) {
    const message = await ctx.reply("‚ö†Ô∏è –ú–∞—Ç—á –Ω–µ –Ω–∞—á–∞—Ç!");
    return deleteMessageAfterDelay(ctx, message.message_id);
  }

  const teamCount = parseInt(ctx.match[1]);
  if (teamCount < 2 || teamCount > 4) {
    const message = await ctx.reply("‚ö†Ô∏è –î–æ–ø—É—Å—Ç–∏–º–æ 2-4 –∫–æ–º–∞–Ω–¥—ã!");
    return deleteMessageAfterDelay(ctx, message.message_id);
  }

  if (players.length < teamCount) {
    const message = await ctx.reply("‚ö†Ô∏è –ò–≥—Ä–æ–∫–æ–≤ –º–µ–Ω—å—à–µ —á–µ–º –∫–æ–º–∞–Ω–¥!");
    return deleteMessageAfterDelay(ctx, message.message_id);
  }

  // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
  const shuffledPlayers = shuffle([...players]);
  const teams = splitTeams(shuffledPlayers, teamCount);

  // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
  const messageText = formatTeamsMessage(teams);
  const keyboard = Markup.inlineKeyboard([
    Markup.button.callback("üîÑ –ü–µ—Ä–µ–º–µ—à–∞—Ç—å —Å–Ω–æ–≤–∞", `shuffle_teams_${teamCount}`)
  ]);

  const sentMessage = await ctx.reply(messageText, {
    parse_mode: "HTML",
    reply_markup: keyboard.reply_markup
  });

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  ctx.session.teamsMessageId = sentMessage.message_id;
});

// –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞
function shuffle(array) {
  for (let i = array.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [array[i], array[j]] = [array[j], array[i]];
  }
  return array;
}

// –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –∫–æ–º–∞–Ω–¥—ã
function splitTeams(players, teamCount) {
  const teams = [];
  const playersPerTeam = Math.ceil(players.length / teamCount);
  
  for (let i = 0; i < teamCount; i++) {
    teams.push(players.slice(i * playersPerTeam, (i + 1) * playersPerTeam));
  }
  return teams;
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–º–∞–Ω–¥–∞–º–∏
function formatTeamsMessage(teams) {
  let message = "‚öΩ <b>–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n";
  teams.forEach((team, index) => {
    message += `üîµ <b>–ö–æ–º–∞–Ω–¥–∞ ${index + 1}:</b>\n`;
    team.forEach((player, playerIndex) => {
      message += `${playerIndex + 1}. ${player.name} ${player.username || ""}\n`;
    });
    message += "\n";
  });
  return message;
}
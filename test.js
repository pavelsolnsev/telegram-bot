const GlobalState = (() => {
  const ADMIN_ID = Number(process.env.ADMIN_ID);
  const GROUP_ID = Number(process.env.ID);
  const IMAGE_URL = process.env.IMAGE_URL;

  let isMatchStarted = false;
  let MAX_PLAYERS = 14;
  let players = [];
  let queue = [];
  let teams = [];
  let collectionDate = null;
  let notificationSent = false;
  let listMessageId = null;
  let location = '–õ–æ–∫–∞—Ü–∏–∏ –Ω–µ—Ç—É';
  let lastTeamCount = null;
  let lastTeamsMessage = null;
  let playingTeams = null;
  let playingTeamsMessageId = null;

  // –ù–æ–≤–∞—è –≥–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–º–∞–Ω–¥
  let teamStats = {};

  const Store = {
    getAdminId: () => ADMIN_ID,
    getGroupId: () => GROUP_ID,
    getStart: () => isMatchStarted,
    setStart: (status) => isMatchStarted = status,
    getMaxPlayers: () => MAX_PLAYERS,
    setMaxPlayers: (number) => MAX_PLAYERS = number,
    getPlayers: () => players,
    setPlayers: (array) => players = array,
    getQueue: () => queue,
    setQueue: (array) => queue = array,
    getCollectionDate: () => collectionDate,
    setCollectionDate: (date) => collectionDate = date,
    getLocation: () => location,
    setLocation: (string) => location = string,
    getNotificationSent: () => notificationSent,
    setNotificationSent: (status) => notificationSent = status,
    getListMessageId: () => listMessageId,
    setListMessageId: (id) => listMessageId = id,
    getIMAGE_URL: () => IMAGE_URL,
    setIMAGE_URL: (url) => IMAGE_URL = url,
    getTeams: () => teams,
    setTeams: (newTeams) => teams = newTeams,
    getLastTeamCount: () => lastTeamCount,
    setLastTeamCount: (num) => lastTeamCount = num,

    setLastTeamsMessageId: (chatId, messageId) => {
      lastTeamsMessage = { chatId, messageId };
    },
    getLastTeamsMessageId: () => lastTeamsMessage,

    setPlayingTeams: (newPlayingTeams) => {
      playingTeams = newPlayingTeams;
    },
    getPlayingTeams: () => playingTeams,

    setPlayingTeamsMessageId: (chatId, messageId) => {
      playingTeamsMessageId = { chatId, messageId };
    },
    getPlayingTeamsMessageId: () => playingTeamsMessageId,

    // –ì–µ—Ç—Ç–µ—Ä –∏ —Å–µ—Ç—Ç–µ—Ä –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    getTeamStats: () => teamStats,
    setTeamStats: (stats) => teamStats = stats,
  };

  return Object.freeze(Store);
})();

module.exports = { GlobalState };


const buildTeamsMessage = (teams, title = "–°–æ—Å—Ç–∞–≤—ã –∫–æ–º–∞–Ω–¥", teamStats = {}) => {
  let message = `üèÜ <b>${title}:</b>\n\n`;
  teams.forEach((team, index) => {
    const teamKey = `team${index + 1}`;
    const stats = teamStats[teamKey] || { wins: 0, losses: 0, draws: 0, games: 0 };
    message += `‚öΩ <b>–ö–æ–º–∞–Ω–¥–∞ ${index + 1}:</b> (W: ${stats.wins}, D: ${stats.draws}, L: ${stats.losses}, Games: ${stats.games})\n`;
    team.forEach((player, i) => {
      const goalsText = player.goals && player.goals > 0 ? ` - –ì–æ–ª—ã: ${player.goals}` : "";
      message += `${i + 1}. ${player.name} ${player.username ? `(@${player.username})` : ""}${goalsText}\n`;
    });
    message += "\n";
  });
  return message;
};

module.exports = { buildTeamsMessage };

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–≥—Ä–∞—é—â–∏–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏
const buildPlayingTeamsMessage = (team1, team2, teamIndex1, teamIndex2) => {
  let message = "üî• –ò–≥—Ä–∞—é—Ç —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n\n";
  message += `<b>–ö–æ–º–∞–Ω–¥–∞ ${teamIndex1 + 1}:</b>\n`;
  team1.forEach((player, index) => {
    message += `${index + 1}. ${player.name} (${player.username || "–ë–µ–∑ username"}) - –ì–æ–ª—ã: ${player.goals || 0}\n`;
  });
  message += `\n<b>–ö–æ–º–∞–Ω–¥–∞ ${teamIndex2 + 1}:</b>\n`;
  team2.forEach((player, index) => {
    message += `${index + 1}. ${player.name} (${player.username || "–ë–µ–∑ username"}) - –ì–æ–ª—ã: ${player.goals || 0}\n`;
  });
  return message;
};

module.exports = { buildPlayingTeamsMessage };


const { Markup } = require("telegraf");

const { buildPlayingTeamsMessage } = require("../message/buildPlayingTeamsMessage");
const { createTeamButtons } = require("../buttons/createTeamButtons");

module.exports = (bot, GlobalState) => {
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
  bot.hears(/^play (\d+) (\d+)$/, async (ctx) => {
    const teamIndex1 = parseInt(ctx.match[1], 10) - 1;
    const teamIndex2 = parseInt(ctx.match[2], 10) - 1;
    const teams = GlobalState.getTeams();
  
    if (!teams[teamIndex1] || !teams[teamIndex2]) {
      const message = await ctx.reply("‚õî –ö–æ–º–∞–Ω–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!");
      return deleteMessageAfterDelay(ctx, message.message_id);
    }
  
    // –û—á–∏—â–∞–µ–º –≥–æ–ª—ã –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –Ω–æ–≤—ã–º –º–∞—Ç—á–µ–º
    const resetGoals = (team) => team.map(player => ({
      ...player,
      goals: 0, // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≥–æ–ª—ã
    }));
  
    const team1 = resetGoals(teams[teamIndex1]);
    const team2 = resetGoals(teams[teamIndex2]);
  
    const teamsMessage = buildPlayingTeamsMessage(team1, team2, teamIndex1, teamIndex2);
  
    const sentMessage = await ctx.reply(teamsMessage, {
      parse_mode: "HTML",
      reply_markup: Markup.inlineKeyboard([
        ...createTeamButtons(team1, teamIndex1),
        ...createTeamButtons(team2, teamIndex2),
      ]).reply_markup,
    });
  
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–≥—Ä–∞—é—â–∏–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏
    GlobalState.setPlayingTeamsMessageId(sentMessage.chat.id, sentMessage.message_id);
  
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –∏–≥—Ä–∞—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã
    GlobalState.setPlayingTeams({
      team1,
      team2,
      teamIndex1,
      teamIndex2,
    });
  });
  
};

// –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∏–≥—Ä–∞—é—â–∏—Ö –∫–æ–º–∞–Ω–¥–∞—Ö
const { updatePlayingTeamsMessage } = require("../message/updatePlayingTeamsMessage");

// –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–∞–∫–æ–µ-—Ç–æ –≤—Ä–µ–º—è
const { deleteMessageAfterDelay } = require("../utils/deleteMessageAfterDelay");

// –î–µ–ª–∞–µ–º —Ç–∞–∫, —á—Ç–æ–±—ã —ç—Ç–æ—Ç –∫–æ–¥ –º–æ–∂–Ω–æ –±—ã–ª–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö, –ø–µ—Ä–µ–¥–∞–µ–º –µ–º—É –±–æ—Ç–∞ –∏ "–∫–æ—Ä–æ–±–∫—É" —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–≥—Ä—ã
module.exports = (bot, GlobalState) => {
  // –£—á–∏–º –±–æ—Ç–∞ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—ã –≤—Ä–æ–¥–µ "goal_1_2" (–≥–¥–µ —á–∏—Å–ª–∞ ‚Äî —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –∏ –∏–≥—Ä–æ–∫)
  bot.action(/goal_(\d+)_(\d+)/, async (ctx) => {
    const teamIndex = parseInt(ctx.match[1], 10);
    const playerIndex = parseInt(ctx.match[2], 10);
    const playingTeams = GlobalState.getPlayingTeams();
  
    if (!playingTeams) {
      return ctx.answerCbQuery("‚õî –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–∞—Ç—á–∞!");
    }
  
    let team;
    if (teamIndex === playingTeams.teamIndex1) {
      team = playingTeams.team1;
    } else if (teamIndex === playingTeams.teamIndex2) {
      team = playingTeams.team2;
    } else {
      return ctx.answerCbQuery("‚õî –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!");
    }
  
    if (!team[playerIndex]) {
      return ctx.answerCbQuery("‚õî –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!");
    }
  
    team[playerIndex].goals += 1;
    GlobalState.setPlayingTeams(playingTeams);
  
    await updatePlayingTeamsMessage(ctx);
  
    const message = await ctx.reply(`‚öΩ –ì–æ–ª –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è ${team[playerIndex].name}! –¢–µ–ø–µ—Ä—å —É –Ω–µ–≥–æ ${team[playerIndex].goals} –≥–æ–ª(–æ–≤) –≤ —ç—Ç–æ–º –º–∞—Ç—á–µ.`);
    return deleteMessageAfterDelay(ctx, message.message_id);
  });
  
};


const { deleteMessageAfterDelay } = require("../utils/deleteMessageAfterDelay"); // –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π

module.exports = (bot, GlobalState) => {
  bot.hears(/^e!$/i, async (ctx) => {
    // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π
		const listMessageId = GlobalState.getListMessageId();
		const isMatchStarted = GlobalState.getStart(); // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∞—Ç –ª–∏ –º–∞—Ç—á
		const ADMIN_ID = GlobalState.getAdminId(); // –ü–æ–ª—É—á–∞–µ–º ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

    await ctx.deleteMessage().catch(() => {});

   if (!isMatchStarted) return; // –ï—Å–ª–∏ –º–∞—Ç—á –Ω–µ –Ω–∞—á–∞–ª—Å—è, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏
		
		if (ctx.from.id !== ADMIN_ID) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
			const message = await ctx.reply("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã."); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—Ä–µ—Ç–µ
			return deleteMessageAfterDelay(ctx, message.message_id); // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
		}

    // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∏–≥—Ä–æ–∫–æ–≤, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (listMessageId) {
      await ctx.telegram
        .deleteMessage(ctx.chat.id, listMessageId)
        .catch(() => {});
      GlobalState.setListMessageId(null);
    }

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –∏–≥—Ä–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    GlobalState.setPlayers([]); // –û—á–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤
    GlobalState.setQueue([]); // –û—á–∏—Å—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏
    GlobalState.setCollectionDate(null); // –£–¥–∞–ª–µ–Ω–∏–µ –¥–∞—Ç—ã —Å–±–æ—Ä–∞
    GlobalState.setLocation("–õ–æ–∫–∞—Ü–∏—è –ø–æ–∫–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞"); // –°–±—Ä–æ—Å –ª–æ–∫–∞—Ü–∏–∏
    GlobalState.setMaxPlayers(14); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
    GlobalState.setStart(false); // –ó–∞–≤–µ—Ä—à–∞–µ–º –º–∞—Ç—á
    GlobalState.setNotificationSent(false); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const message = await ctx.reply(
      "‚úÖ –°–±–æ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω!"
    );
    deleteMessageAfterDelay(ctx, message.message_id);
  });
};

—É –º–µ–Ω—è –µ—Å—Ç—å –∫–æ–º–∞–Ω–¥–∞ –∫–æ—Ç–æ—Ä–∞—è –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç –º–∞—Ç—á e!
–æ–Ω–∞ –¥–æ–∂–Ω–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤—Å–µ –æ—Ç—á–∏—â–∞—Ç—å —á—Ç–æ–±—ã –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã play fin –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ —Ä–∞–±–æ—Ç–∞–ª–∏ –ø–æ –Ω–æ–≤–æ–π c —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ 
–Ω–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–∞–∫–æ–≤ –æ–Ω–∞ –¥–æ–∂–Ω–∞ –∑–∞–ø–æ–º–Ω–∏—Ç—å –∏ –≥–¥–µ-—Ç–æ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å 
—è —ç—Ç—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞ –±—ç–∫ —á—Ç–æ–±—ã –∏–∑ –±—ç–∫–∞ –ø–æ—Ç–æ–º —è –º–æ–≥ –ø–æ–¥—Ç—è–≥–∏–≤–∞—Ç—å —ç—Ç—É —Å—Ç–∞—Ç—É –¥–ª—è –∏–≥—Ä–∞–∫–æ–≤